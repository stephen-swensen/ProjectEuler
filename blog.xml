<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-8850569409241765652.archive</id><updated>2010-11-22T23:22:30.850-05:00</updated><title type='text'>Project Euler for F#un</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/archive'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/archive'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-8850569409241765652.layout</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: Project Euler for F#un</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Blogger Template Style
Name:     Minima Stretch
Date:     26 Feb 2004
----------------------------------------------- */

/* Variable definitions
   ====================
   &lt;Variable name="bgcolor" description="Page Background Color"
             type="color" default="#fff" value="#ffffff"&gt;
   &lt;Variable name="textcolor" description="Text Color"
             type="color" default="#333" value="#333333"&gt;
   &lt;Variable name="linkcolor" description="Link Color"
             type="color" default="#58a" value="#5588aa"&gt;
   &lt;Variable name="pagetitlecolor" description="Blog Title Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="descriptioncolor" description="Blog Description Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="titlecolor" description="Post Title Color"
             type="color" default="#c60" value="#cc6600"&gt;
   &lt;Variable name="bordercolor" description="Border Color"
             type="color" default="#ccc" value="#cccccc"&gt;
   &lt;Variable name="sidebarcolor" description="Sidebar Title Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="sidebartextcolor" description="Sidebar Text Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="visitedlinkcolor" description="Visited Link Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="bodyfont" description="Text Font"
             type="font" default="normal normal 100% Georgia, Serif" value="normal normal 100% Georgia, Serif"&gt;
   &lt;Variable name="headerfont" description="Sidebar Title Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif" value="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif"&gt;
   &lt;Variable name="pagetitlefont" description="Blog Title Font"
             type="font"
             default="normal normal 200% Georgia, Serif" value="normal normal 200% Georgia, Serif"&gt;
   &lt;Variable name="descriptionfont" description="Blog Description Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="postfooterfont" description="Post Footer Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="startSide" description="Start side in blog language"
             type="automatic" default="left" value="left"&gt;
   &lt;Variable name="endSide" description="End side in blog language"
             type="automatic" default="right" value="right"&gt;
*/

/* Use this with templates/template-twocol.html */

body {
  background:$bgcolor;
  margin:0;
  color:$textcolor;
  font:x-small Georgia Serif;
  font-size/* */:/**/small;
  font-size: /**/small;
  text-align: center;
  }
a:link {
  color:$linkcolor;
  text-decoration:none;
  }
a:visited {
  color:$visitedlinkcolor;
  text-decoration:none;
  }
a:hover {
  color:$titlecolor;
  text-decoration:underline;
}
a img {
  border-width:0;
  }

/* Header
-----------------------------------------------
 */

#header-wrapper {
  margin:0 2% 10px;
  border:1px solid $bordercolor;
  }

#header { 
  margin: 5px;
  border: 1px solid $bordercolor;
  text-align: center;
  color:$pagetitlecolor;
}

#header-inner {
  background-position: center;
  margin-$startSide: auto;
  margin-$endSide: auto;
}

#header h1 {
  margin:5px 5px 0;
  padding:15px 20px .25em;
  line-height:1.2em;
  text-transform:uppercase;
  letter-spacing:.2em;
  font: $pagetitlefont;
}

#header a {
  color:$pagetitlecolor;
  text-decoration:none;
  }

#header a:hover {
  color:$pagetitlecolor;
  }

#header .description {
  margin:0 5px 5px;
  padding:0 20px 15px;
  text-transform:uppercase;
  letter-spacing:.2em;
  line-height: 1.4em;
  font: $descriptionfont;
  color: $descriptioncolor;
}

#header img {
  margin-$startSide: auto;
  margin-$endSide: auto;
}


/* Outer-Wrapper
----------------------------------------------- */
#outer-wrapper {
  margin:0;
  padding:10px;
  text-align:$startSide;
  font: $bodyfont;
  }

#main-wrapper {
  margin-$startSide: 2%;
  width: 67%;
  float: $startSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
  }

#sidebar-wrapper {
  margin-$endSide: 2%;
  width: 25%;
  float: $endSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}


/* Headings
----------------------------------------------- */

h2 {
  margin:1.5em 0 .75em;
  font:$headerfont;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color:$sidebarcolor;
}


/* Posts
-----------------------------------------------
 */
h2.date-header {
  margin:1.5em 0 .5em;
  }

.post {
  margin:.5em 0 1.5em;
  border-bottom:1px dotted $bordercolor;
  padding-bottom:1.5em;
  }
.post h3 {
  margin:.25em 0 0;
  padding:0 0 4px;
  font-size:140%;
  font-weight:normal;
  line-height:1.4em;
  color:$titlecolor;
}

.post h3 a, .post h3 a:visited, .post h3 strong {
  display:block;
  text-decoration:none;
  color:$titlecolor;
  font-weight:normal;
}

.post h3 strong, .post h3 a:hover {
  color:$textcolor;
}

.post-body {
  margin:0 0 .75em;
  line-height:1.6em;
}

.post-body blockquote {
  line-height:1.3em;  
}

.post-footer {
  margin: .75em 0;
  color:$sidebarcolor;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  line-height: 1.4em;
}

.comment-link {
  margin-$startSide:.6em;
  }
.post img, table.tr-caption-container {
  padding:4px;
  border:1px solid $bordercolor;
  }
.tr-caption-container img {
  border: none;
  padding: 0;
}
.post blockquote {
  margin:1em 20px;
  }
.post blockquote p {
  margin:.75em 0;
  }

/* Comments
----------------------------------------------- */
#comments h4 {
  margin:1em 0;
  font-weight: bold;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color: $sidebarcolor;
  }

#comments-block {
  margin:1em 0 1.5em;
  line-height:1.6em;
  }
#comments-block .comment-author {
  margin:.5em 0;
  }
#comments-block .comment-body {
  margin:.25em 0 0;
  }
#comments-block .comment-footer {
  margin:-.25em 0 2em;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.1em;
  }
#comments-block .comment-body p {
  margin:0 0 .75em;
  }
.deleted-comment {
  font-style:italic;
  color:gray;
  }

.feed-links {
  clear: both;
  line-height: 2.5em;
}

#blog-pager-newer-link {
  float: $startSide;
 }
 
#blog-pager-older-link {
  float: $endSide;
 }
 
#blog-pager {   
  text-align: center; 
 }

/* Sidebar Content
----------------------------------------------- */
.sidebar { 
  color: $sidebartextcolor;
  line-height: 1.5em;
 }

.sidebar ul {
  list-style:none;
  margin:0 0 0;
  padding:0 0 0;
}
.sidebar li {
  margin:0;
  padding-top:0;
  padding-$endSide:0;
  padding-bottom:.25em;
  padding-$startSide:15px;
  text-indent:-15px;
  line-height:1.5em;
  }

.sidebar .widget, .main .widget { 
  border-bottom:1px dotted $bordercolor;
  margin:0 0 1.5em;
  padding:0 0 1.5em;
 }

.main .Blog { 
  border-bottom-width: 0;
 }

/* Profile 
----------------------------------------------- */
.profile-img { 
  float: $startSide;
  margin-top: 0;
  margin-$endSide: 5px;
  margin-bottom: 5px;
  margin-$startSide: 0;
  padding: 4px;
  border: 1px solid $bordercolor;
}

.profile-data {
  margin:0;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  color: $sidebarcolor;
  font-weight: bold;
  line-height: 1.6em;
}

.profile-datablock { 
  margin:.5em 0 .5em;
}

.profile-textblock { 
  margin: 0.5em 0;
  line-height: 1.6em;
}

.profile-link { 
  font: $postfooterfont;
  text-transform: uppercase;
  letter-spacing: .1em;
}

/* Footer
----------------------------------------------- */
#footer {
  width:660px;
  clear:both;
  margin:0 auto;
  padding-top:15px;
  line-height: 1.6em;
  text-transform:uppercase;
  letter-spacing:.1em;
  text-align: center;
}
]]&gt;&lt;/b:skin&gt;
&lt;style type='text/css'&gt;
    pre.code {overflow:auto;} /*complements VSPast via Windows Live Writer*/
&lt;/style&gt;
  &lt;/head&gt;

  &lt;body&gt;
  &lt;div id='outer-wrapper'&gt;&lt;div id='wrap2'&gt;

    &lt;!-- skip links for text browsers --&gt;
    &lt;span id='skiplinks' style='display:none;'&gt;
      &lt;a href='#main'&gt;skip to main &lt;/a&gt; |
      &lt;a href='#sidebar'&gt;skip to sidebar&lt;/a&gt;
    &lt;/span&gt;

    &lt;div id='header-wrapper'&gt;
      &lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
&lt;b:widget id='Header1' locked='true' title='Project Euler for F#un (Header)' type='Header'&gt;
&lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
          &lt;div id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;b:else/&gt;
          &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                        + &amp;quot;background-position: &amp;quot;                        + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                        + data:widthStyleStr                        + &amp;quot;min-height: &amp;quot; + data:height                        + &amp;quot;_height: &amp;quot; + data:height                        + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
    &lt;/div&gt;
 
    &lt;div id='content-wrapper'&gt;

      &lt;div id='crosscol-wrapper' style='text-align:center'&gt;
        &lt;b:section class='crosscol' id='crosscol'/&gt;
      &lt;/div&gt;

      &lt;div id='main-wrapper'&gt;
        &lt;b:section class='main' id='main' showaddelement='no'&gt;
&lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
&lt;b:includable id='main' var='top'&gt;

  &lt;b:if cond='data:top.showPlusOne'&gt;
    &lt;script expr:src='data:top.plusOneJsUrl'/&gt;
  &lt;/b:if&gt;

  &lt;!-- posts --&gt;
  &lt;div class='blog-posts hfeed'&gt;

    &lt;b:include data='top' name='status-message'/&gt;

    &lt;data:defaultAdStart/&gt;
    &lt;b:loop values='data:posts' var='post'&gt;
      &lt;b:if cond='data:post.isDateStart'&gt;
        &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
          &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &lt;/b:if&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:post.isDateStart'&gt;
        &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:post.dateHeader'&gt;
        &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:post.isDateStart'&gt;
        &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
      &lt;/b:if&gt;
      &lt;div class='post-outer'&gt;
      &lt;b:include data='post' name='post'/&gt;
      &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
        &lt;b:include data='post' name='comments'/&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
        &lt;b:include data='post' name='comments'/&gt;
      &lt;/b:if&gt;
      &lt;/div&gt;
      &lt;b:if cond='data:post.includeAd'&gt;
        &lt;b:if cond='data:post.isFirstPost'&gt;
          &lt;data:defaultAdEnd/&gt;
        &lt;b:else/&gt;
          &lt;data:adEnd/&gt;
        &lt;/b:if&gt;
        &lt;div class='inline-ad'&gt;
          &lt;data:adCode/&gt;
        &lt;/div&gt;
        &lt;data:adStart/&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:post.trackLatency'&gt;
        &lt;data:post.latencyJs/&gt;
      &lt;/b:if&gt;
    &lt;/b:loop&gt;
    &lt;b:if cond='data:numPosts != 0'&gt;
      &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
    &lt;/b:if&gt;
    &lt;data:adEnd/&gt;
  &lt;/div&gt;

  &lt;!-- navigation --&gt;
  &lt;b:include name='nextprev'/&gt;

  &lt;!-- feed links --&gt;
  &lt;b:include name='feedLinks'/&gt;

  &lt;b:if cond='data:top.showStars'&gt;
    &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
    &lt;script type='text/javascript'&gt;
      google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
      function initialize() {
        google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
        google.annotations.createAll();
        google.annotations.fetch();
      }
      google.setOnLoadCallback(initialize);
    &lt;/script&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
&lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry uncustomized-post-template'&gt;
    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title'&gt;
      &lt;b:if cond='data:post.link'&gt;
        &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
      &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;b:if cond='data:blog.url != data:post.url'&gt;
            &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
          &lt;b:else/&gt;
            &lt;data:post.title/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
      &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header'&gt;
    &lt;div class='post-header-line-1'/&gt;
    &lt;/div&gt;

    &lt;div class='post-body entry-content'&gt;
      &lt;data:post.body/&gt;
      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
    &lt;/div&gt;

    &lt;b:if cond='data:post.hasJumpLink'&gt;
      &lt;div class='jump-link'&gt;
        &lt;a expr:href='data:post.url + &amp;quot;#more&amp;quot;' expr:title='data:post.title'&gt;&lt;data:post.jumpText/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;
      &lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
          &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-timestamp'&gt;
        &lt;b:if cond='data:top.showTimestamp'&gt;
          &lt;data:top.timestampLabel/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
        &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='reaction-buttons'&gt;
        &lt;b:if cond='data:top.showReactions'&gt;
          &lt;table border='0' cellpadding='0' cellspacing='0' width='100%'&gt;&lt;tr&gt;
            &lt;td class='reactions-label-cell' nowrap='nowrap' valign='top' width='1%'&gt;
              &lt;span class='reactions-label'&gt;
              &lt;data:top.reactionsLabel/&gt;&lt;/span&gt;&amp;#160;&lt;/td&gt;
            &lt;td&gt;&lt;iframe allowtransparency='true' class='reactions-iframe' expr:src='data:post.reactionsUrl' frameborder='0' name='reactions' scrolling='no'/&gt;&lt;/td&gt;
           &lt;/tr&gt;&lt;/table&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='plus-one'&gt;
        &lt;b:if cond='data:top.showPlusOne'&gt;
          &lt;div expr:id='&amp;quot;plus-one-&amp;quot; + data:post.id' style='height: 24px;'/&gt;
          &lt;script&gt;
            iframes.open(&amp;#39;:annotator&amp;#39;,
                {style: &amp;#39;inline&amp;#39;, height: 24, container: &amp;#39;plus-one-&amp;#39; + &amp;#39;&lt;data:post.id/&gt;&amp;#39;},
                {theme: &amp;#39;light&amp;#39;, annotations: &amp;#39;on&amp;#39;, url: &amp;#39;&lt;data:post.url/&gt;&amp;#39;, starstyle: &amp;#39;shared&amp;#39;});
          &lt;/script&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='star-ratings'&gt;
        &lt;b:if cond='data:top.showStars'&gt;
           &lt;div expr:g:background-color='data:backgroundColor' expr:g:text-color='data:textColor' expr:g:url='data:post.absoluteUrl' g:height='42' g:type='RatingPanel' g:width='280'/&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-comment-link'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
            &lt;b:if cond='data:post.allowComments'&gt;
              &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

       &lt;!-- backlinks --&gt;
       &lt;span class='post-backlinks post-comment-link'&gt;
         &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
           &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
             &lt;b:if cond='data:post.showBacklinks'&gt;
               &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;&lt;data:top.backlinkLabel/&gt;&lt;/a&gt;
             &lt;/b:if&gt;
           &lt;/b:if&gt;
         &lt;/b:if&gt;
       &lt;/span&gt;

      &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;img alt='' class='icon-action' height='13' src='http://img1.blogblog.com/img/icon18_email.gif' width='18'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt;

      &lt;!-- share buttons --&gt;
      &lt;div class='post-share-buttons'&gt;
        &lt;b:if cond='data:post.sharePostUrl'&gt;
          &lt;b:include data='post' name='shareButtons'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;

      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;
      &lt;span class='post-labels'&gt;
        &lt;b:if cond='data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'&gt;
      &lt;span class='post-location'&gt;
        &lt;b:if cond='data:top.showLocation'&gt;
          &lt;b:if cond='data:post.location'&gt;
            &lt;data:postLocationLabel/&gt;
            &lt;a expr:href='data:post.location.mapsUrl' target='_blank'&gt;&lt;data:post.location.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='shareButtons' var='post'&gt;
  &lt;a class='share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;
    &lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;
  &lt;a class='share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;
    &lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;
  &lt;a class='share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;
    &lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;
  &lt;a class='share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;
    &lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;
  &lt;a class='share-button sb-buzz' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=buzz&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=415,width=690\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToBuzzMsg' target='_blank'&gt;
    &lt;span class='share-button-link-text'&gt;&lt;data:top.shareToBuzzMsg/&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/b:includable&gt;
&lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
&lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
&lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;
        &lt;b:if cond='data:post.numComments == 1'&gt;
          1 &lt;data:commentLabel/&gt;:
        &lt;b:else/&gt;
          &lt;data:post.numComments/&gt; &lt;data:commentLabelPlural/&gt;:
        &lt;/b:if&gt;
      &lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
    &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
    &lt;data:blogTeamBlogMessage/&gt;
    &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
    &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup' style='width:100px;height:20px;'/&gt;
    &lt;/b:if&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
&lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.allowComments'&gt;
          &lt;b:if cond='data:post.feedLinks'&gt;
            &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
      &lt;/div&gt;

      &lt;div id='sidebar-wrapper'&gt;
        &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
&lt;b:widget id='Followers1' locked='false' title='Followers' type='Followers'&gt;
&lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;b:if cond='data:codeSnippet != &amp;quot;&amp;quot;'&gt;
      &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;b:else/&gt;
      &lt;b:if cond='data:totalFollowerCount != &amp;quot;&amp;quot;'&gt;
        &lt;h2 class='title'&gt;&lt;data:title/&gt; (&lt;data:totalFollowerCount/&gt;)&lt;/h2&gt;
      &lt;/b:if&gt;
    &lt;/b:if&gt;  
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;-wrapper&amp;quot;'&gt;
      &lt;b:if cond='data:codeSnippet != &amp;quot;&amp;quot;'&gt;
        &lt;div style='margin-right:2px;'&gt;
          &lt;data:codeSnippet/&gt;
        &lt;/div&gt;
      &lt;b:else/&gt;
        &lt;b:if cond='data:totalFollowerCount == &amp;quot;&amp;quot;'&gt;
          &lt;span class='item-control following-not-admin'&gt;
            &lt;b&gt;&lt;data:failureSnippet/&gt;&lt;/b&gt;
          &lt;/span&gt;
          &lt;span class='item-control blog-admin'&gt;
            &lt;b&gt;&lt;data:adminFailureSnippet/&gt;&lt;/b&gt;
          &lt;/span&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:followingLinkPresent'&gt;
            &lt;div class='follow-this profile-link item-control following-follow-this'&gt;
              &lt;a expr:href='&amp;quot;javascript:_FollowersView._openPopup(\&amp;quot;&amp;quot; + data:followUri + &amp;quot;\&amp;quot;);&amp;quot;'&gt;
                &lt;data:followThisMessage/&gt;
              &lt;/a&gt;
            &lt;/div&gt;
            &lt;div class='follow-this profile-link item-control following-stop-following-this'&gt;
              &lt;a expr:href='&amp;quot;javascript:_FollowersView._openPopup(\&amp;quot;&amp;quot; + data:followUri + &amp;quot;\&amp;quot;);&amp;quot;'&gt;
                &lt;data:stopFollowingMessage/&gt;
              &lt;/a&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;
  
          &lt;div class='followers-grid'&gt;
            &lt;b:if cond='data:totalFollowerCount == 0'&gt;
              &lt;div class='profile-link item-control following-follow-this'&gt;
                &lt;data:emptyFollowersMessage/&gt;
              &lt;/div&gt;
            &lt;/b:if&gt;
            &lt;!--
            Relies on the js written out in navbar.gxp
            --&gt;
            &lt;b:loop values='data:followers' var='follower'&gt;
              &lt;div class='follower'&gt;
                &lt;a expr:href='data:follower.profileUrl' expr:title='data:follower.displayName' rel='nofollow'&gt;
                &lt;img class='follower-img' expr:alt='data:follower.displayName' expr:height='data:follower.imageHeight' expr:onerror='&amp;quot;this.onerror=null;this.src=\&amp;quot;&amp;quot; + data:anonFollowerImageUrl + &amp;quot;\&amp;quot;;&amp;quot;' expr:onload='&amp;quot;setAttributeOnload(this, \&amp;quot;src\&amp;quot;, \&amp;quot;&amp;quot; + data:follower.imageUrl + &amp;quot;\&amp;quot;)&amp;quot;' expr:width='data:follower.imageWidth' src='http://img1.blogblog.com/img/blank.gif'/&gt;
                &lt;/a&gt;
              &lt;/div&gt;
            &lt;/b:loop&gt;
            &lt;div class='clear'/&gt;
          &lt;/div&gt;
  
          &lt;div class='followers-canvas profile-link'&gt;
            &lt;data:followersFooterMessage/&gt;
            &lt;span class='item-control following-not-admin'&gt;
              &lt;a expr:href='data:followersUri'&gt;
                &lt;data:viewAllMessage/&gt;
              &lt;/a&gt;
            &lt;/span&gt;
            &lt;span class='item-control blog-admin'&gt;
              &lt;a expr:href='data:manageFollowersUri'&gt;
                &lt;data:manageFollowersMessage/&gt;
              &lt;/a&gt;
            &lt;/span&gt;
          &lt;/div&gt;
          &lt;/b:if&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
&lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
     &lt;b:include data='data' name='interval'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
      &lt;b:include data='data' name='flat'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
      &lt;b:include data='data' name='menu'/&gt;
    &lt;/b:if&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
&lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
&lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='i'&gt;
      &lt;ul class='hierarchy'&gt;
        &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
          &lt;b:include data='i' name='toggle'/&gt;
          &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
            &lt;span class='post-count' dir='ltr'&gt;(&lt;data:i.post-count/&gt;)&lt;/span&gt;
          &lt;b:if cond='data:i.data'&gt;
            &lt;b:include data='i.data' name='interval'/&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:i.posts'&gt;
            &lt;b:include data='i.posts' name='posts'/&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
&lt;b:includable id='toggle' var='interval'&gt;
  &lt;b:if cond='data:interval.toggleId'&gt;
  &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy toggle-open'&gt;&amp;#9660;&amp;#160;&lt;/span&gt;
    &lt;/a&gt;
  &lt;b:else/&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy'&gt;
        &lt;b:if cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'&gt;
          &amp;#9668;&amp;#160;
        &lt;b:else/&gt;
          &amp;#9658;&amp;#160;
        &lt;/b:if&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/b:if&gt;
 &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='i'&gt;
      &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='Profile1' locked='false' title='About Me' type='Profile'&gt;
&lt;b:includable id='main'&gt;
    &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:team == &amp;quot;true&amp;quot;'&gt; &lt;!-- team blog profile --&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:authors' var='i'&gt;
          &lt;li&gt;&lt;a expr:href='data:i.userUrl'&gt;&lt;data:i.display-name/&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;

      &lt;b:else/&gt; &lt;!-- normal blog profile --&gt;

      &lt;b:if cond='data:photo.url != &amp;quot;&amp;quot;'&gt;
        &lt;a expr:href='data:userUrl'&gt;&lt;img class='profile-img' expr:alt='data:photo.alt' expr:height='data:photo.height' expr:src='data:photo.url' expr:width='data:photo.width'/&gt;&lt;/a&gt;
      &lt;/b:if&gt;

      &lt;dl class='profile-datablock'&gt;
        &lt;dt class='profile-data'&gt;&lt;data:displayname/&gt;&lt;/dt&gt;

        &lt;b:if cond='data:showlocation == &amp;quot;true&amp;quot;'&gt;
          &lt;dd class='profile-data'&gt;&lt;data:location/&gt;&lt;/dd&gt;
        &lt;/b:if&gt;

        &lt;b:if cond='data:aboutme != &amp;quot;&amp;quot;'&gt;&lt;dd class='profile-textblock'&gt;&lt;data:aboutme/&gt;&lt;/dd&gt;&lt;/b:if&gt;
      &lt;/dl&gt;
      &lt;a class='profile-link' expr:href='data:userUrl'&gt;&lt;data:viewProfileMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;

     &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
      &lt;/div&gt;

      &lt;!-- spacer for skins that want sidebar and main to be the same height--&gt;
      &lt;div class='clear'&gt;&amp;#160;&lt;/div&gt;

    &lt;/div&gt; &lt;!-- end content-wrapper --&gt;

    &lt;div id='footer-wrapper'&gt;
      &lt;b:section class='footer' id='footer'/&gt;
    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt; &lt;!-- end outer-wrapper --&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/template/default'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_PUBLISHING_MODE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PUBLISHING_MODE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_NAME</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>Project Euler for F#un</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_NAME'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_DESCRIPTION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>Learning F# through Project Euler</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DESCRIPTION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_PROMOTED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PROMOTED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_SEARCHABLE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SEARCHABLE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_ADULT_CONTENT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ADULT_CONTENT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_QUICK_EDITING</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_QUICK_EDITING'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_EMAIL_POST_LINKS</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to e-mail posts</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_MAX_NUM</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>360</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_MAX_NUM'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_MAX_UNIT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>DAYS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_MAX_UNIT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_DATE_FORMAT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>26</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DATE_FORMAT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_TIME_STAMP_FORMAT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>27</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_TIME_ZONE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>America/New_York</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_TIME_ZONE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_LOCALE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_LOCALE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_SHOW_TITLE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SHOW_TITLE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_SHOW_URL</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SHOW_URL'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_FLOAT_ALIGNMENT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_POST_TEMPLATE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_TEMPLATE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENTS_ALLOWED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_ACCESS</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>ANYONE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_ACCESS'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_BACKLINKS_ALLOWED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>29</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>EMBEDDED_IFRAME</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_MODERATION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_CAPTCHA</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_EMAIL</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of e-mail addresses to send notifications of new comments to</title><content type='text'>stephen.swensen@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_EMAIL'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address to send notifications of new comments needing moderation to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_MESSAGE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_MESSAGE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_BY_POST_ARCHIVING</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_POST_FEED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_FEED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_COMMENT_FEED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_COMMENT_FEED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_PER_POST_FEED</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_PER_POST_FEED'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_FEED_REDIRECT_URL</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_POST_FEED_FOOTER</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_POST_FEED_FOOTER'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_SEND_EMAIL</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SEND_EMAIL'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_SUBDOMAIN</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The BlogSpot subdomain under which to publish your blog</title><content type='text'>projecteulerfun</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_SUBDOMAIN'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_READ_ACCESS_MODE</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_READ_ACCESS_MODE'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_READER_PERMISSION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_READER_PERMISSION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_AUTHOR_PERMISSION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.settings.BLOG_ADMIN_PERMISSION</id><published>2010-05-08T10:09:33.688-04:00</published><updated>2010-11-22T23:22:30.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>stephen.swensen@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/settings/BLOG_ADMIN_PERMISSION'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-9201410120642746054</id><published>2010-11-21T21:21:00.001-05:00</published><updated>2010-11-21T21:41:15.315-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 50: Which prime, below one-million, can be written as the sum of the most consecutive primes?</title><content type='html'>&lt;p&gt;Alright, we completed through problem 50!&lt;/p&gt;  &lt;p&gt;First, I thought it was about time I implemented a decent prime sequence generator instead of continuing to combine &lt;em&gt;Seq.initInfinite&lt;/em&gt; and &lt;em&gt;isPrime&lt;/em&gt;. It was important to me that we create an infinite sequence of primes, rather than the typical finite prime sieve. I spent a considerable amount of effort playing with various algorithms and implementations of those algorithms. The final algorithm I settled on isn’t quite a sieve, but works on the general principle, allowing us to generate the millionth prime in about 4 seconds. Compare that to &lt;a href="http://fsharpnews.blogspot.com/2010/02/sieve-of-eratosthenes.html"&gt;this&lt;/a&gt; infinite, true prime sieve which can generate the millionth prime in just over a second, but I prefer to stick with my algorithm, since I worked the core of it out independently. It may be worth pointing out that the memory used in my implementation is O(n), where n is the count of the prime, while any true sieve is O(p), where p is the prime itself.&lt;/p&gt;  &lt;p&gt;To help us out, we finally get around to implementing an extension to the &lt;em&gt;Seq&lt;/em&gt; module, &lt;em&gt;infiniteRange&lt;/em&gt; (note that by marking the function &lt;em&gt;inline&lt;/em&gt;, the compiler will automatically give a structural type signature to this function so that it can be used with int32, int64, bigint, float, etc.):&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;infiniteRange start skip = 
    seq {
        &lt;span style="color: blue"&gt;let &lt;/span&gt;n = ref start
        &lt;span style="color: blue"&gt;while true do
            yield &lt;/span&gt;n.contents
            n.contents &amp;lt;- n.contents + skip
    }&lt;/pre&gt;

&lt;p&gt;Next now we show our our &lt;em&gt;primes&lt;/em&gt; implementation which is structurally generic as usual with integral type specific versions:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: green"&gt;///p is &amp;quot;prime&amp;quot;, s=p*p, c is &amp;quot;multiplier&amp;quot;, m=c*p
&lt;/span&gt;&lt;span style="color: blue"&gt;type &lt;/span&gt;SievePrime&amp;lt;'a&amp;gt; = {&lt;span style="color: blue"&gt;mutable &lt;/span&gt;c:'a ; p:'a ; &lt;span style="color: blue"&gt;mutable &lt;/span&gt;m:'a ; s:'a}

&lt;span style="color: green"&gt;///A cached, infinite sequence of primes
&lt;/span&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;primes_of (g:G&amp;lt;'a&amp;gt;) =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;primeList = ResizeArray&amp;lt;_&amp;gt;()
    primeList.Add({c=g.three ; p=g.three ; m=g.three*g.three ; s=g.three*g.three})

    &lt;span style="color: green"&gt;//test whether n is composite, if not add it to the primeList and return false
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;isComposite n = 
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop i = 
            &lt;span style="color: blue"&gt;let &lt;/span&gt;sp = primeList.[i]
            &lt;span style="color: blue"&gt;while &lt;/span&gt;sp.m &amp;lt; n &lt;span style="color: blue"&gt;do
                &lt;/span&gt;sp.c &amp;lt;- sp.c+g.one
                sp.m &amp;lt;- sp.c*sp.p

            &lt;span style="color: blue"&gt;if &lt;/span&gt;sp.m = n &lt;span style="color: blue"&gt;then true
            elif &lt;/span&gt;i = (primeList.Count-1) || sp.s &amp;gt; n &lt;span style="color: blue"&gt;then
                 &lt;/span&gt;primeList.Add({c=n ; p=n ; m=n*n ; s=n*n})
                 &lt;span style="color: blue"&gt;false
            else &lt;/span&gt;loop (i+1)
        loop 0

    seq { 
        &lt;span style="color: blue"&gt;yield &lt;/span&gt;g.two ; &lt;span style="color: blue"&gt;yield &lt;/span&gt;g.three

        &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;1..primeList.Count-1 &lt;span style="color: blue"&gt;do
            yield &lt;/span&gt;primeList.[i].p

        &lt;span style="color: blue"&gt;yield! &lt;/span&gt;Seq.infiniteRange (primeList.[primeList.Count-1].p + g.two) g.two 
               |&amp;gt; Seq.filter (isComposite&amp;gt;&amp;gt;not)
    }&lt;/pre&gt;


&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;primes = primes_of gn
&lt;span style="color: blue"&gt;let &lt;/span&gt;primesL = primes_of gL
&lt;span style="color: blue"&gt;let &lt;/span&gt;primesI = primes_of gI&lt;/pre&gt;

&lt;p&gt;Now for problem 50. This was a pretty straight forward problem. We use an array in our algorithm but do not perform any mutation:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem50b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;primesArr = primes |&amp;gt; Seq.takeWhile ((&amp;gt;=)1000000) |&amp;gt; Seq.toArray
    &lt;span style="color: blue"&gt;let &lt;/span&gt;count p =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;count p cur curMax =
            &lt;span style="color: blue"&gt;let &lt;/span&gt;start = primesArr.[cur]
            &lt;span style="color: blue"&gt;if &lt;/span&gt;start &amp;gt;= p/2 &lt;span style="color: blue"&gt;then &lt;/span&gt;curMax
            &lt;span style="color: blue"&gt;else
                let rec &lt;/span&gt;consecutiveSum i sum =
                    &lt;span style="color: blue"&gt;if &lt;/span&gt;sum &amp;gt;= p &lt;span style="color: blue"&gt;then &lt;/span&gt;(i,sum)
                    &lt;span style="color: blue"&gt;else &lt;/span&gt;consecutiveSum (i+1) (sum + primesArr.[i])

                &lt;span style="color: blue"&gt;let &lt;/span&gt;i,sum = consecutiveSum cur 0            
                &lt;span style="color: blue"&gt;let &lt;/span&gt;curMax = max curMax (&lt;span style="color: blue"&gt;if &lt;/span&gt;sum = p &lt;span style="color: blue"&gt;then &lt;/span&gt;i-cur &lt;span style="color: blue"&gt;else &lt;/span&gt;0)
                count p (cur+1) curMax
        count p 0 0

    primesArr
    |&amp;gt; Seq.maxBy count&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/9201410120642746054/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-50-which-prime-below-one.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/9201410120642746054'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/9201410120642746054'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-50-which-prime-below-one.html' title='Problem 50: Which prime, below one-million, can be written as the sum of the most consecutive primes?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-381592216008773012</id><published>2010-11-19T21:49:00.001-05:00</published><updated>2010-11-21T18:55:25.489-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 49: What 12-digit number do you form by concatenating the three terms in this sequence?</title><content type='html'>&lt;p&gt;This was a tough problem. Even after dreaming up an algorithm which would perform well enough, it went through several tweaks until I was satisfied. We resort to an array (though no mutation) and sequence expression in order to achieve short-circuiting and overcome F#’s lack of break and continue (again). This algorithm runs in about 1 minute and 500 milliseconds, just over the Project Euler suggested limit. I was able to uglify it a bit to get it to run in 59 seconds and 700 milliseconds, but I won’t even bother showing that here.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem49b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;fourDigitPrimes =
        {1000..9999}
        |&amp;gt; Seq.filter isPrime
        |&amp;gt; Seq.toArray

    &lt;span style="color: blue"&gt;let &lt;/span&gt;arithmeticTriples = seq {
        &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;{0..fourDigitPrimes.Length-1} &lt;span style="color: blue"&gt;do
            for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;{i+1..fourDigitPrimes.Length-1} &lt;span style="color: blue"&gt;do
                for &lt;/span&gt;k &lt;span style="color: blue"&gt;in &lt;/span&gt;{j+1..fourDigitPrimes.Length-1} &lt;span style="color: blue"&gt;do
                    let &lt;/span&gt;a = fourDigitPrimes.[i]
                    &lt;span style="color: blue"&gt;let &lt;/span&gt;b = fourDigitPrimes.[j]
                    &lt;span style="color: blue"&gt;let &lt;/span&gt;c = fourDigitPrimes.[k]
                    &lt;span style="color: green"&gt;//is arithmetic seq other than given in question
                    &lt;/span&gt;&lt;span style="color: blue"&gt;if &lt;/span&gt;b-a = c-b &amp;amp;&amp;amp; a &amp;lt;&amp;gt; 1487 &lt;span style="color: blue"&gt;then 
                        yield &lt;/span&gt;(a,b,c)
    }
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;arePerms (a,b,c) = 
        &lt;span style="color: blue"&gt;let &lt;/span&gt;setA = Set(Digits.fromInt a)
        &lt;span style="color: blue"&gt;let &lt;/span&gt;setB = Set(Digits.fromInt b)
        setA = setB &amp;amp;&amp;amp; setB = Set(Digits.fromInt c)
        
    arithmeticTriples
    |&amp;gt; Seq.find arePerms
    |&amp;gt; (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(a,b,c) &lt;span style="color: blue"&gt;-&amp;gt;
            &lt;/span&gt;[Digits.fromInt a; Digits.fromInt b; Digits.fromInt c] 
            |&amp;gt; Seq.concat 
            |&amp;gt; Digits.toInt64)&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/381592216008773012/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-49-what-12-digit-number-do-you.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/381592216008773012'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/381592216008773012'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-49-what-12-digit-number-do-you.html' title='Problem 49: What 12-digit number do you form by concatenating the three terms in this sequence?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8402211693493416472</id><published>2010-11-13T18:10:00.001-05:00</published><updated>2010-11-13T18:10:42.811-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 48: Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.</title><content type='html'>&lt;p&gt;Again, easy problem using functional composition, the “hard” work was done in our previous implementation of the &lt;em&gt;Digits&lt;/em&gt; module. The answer was produced surprisingly fast. I would like a better solution to finding the last 10 digits than to convert the entire sequence to an array.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem48a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;digits =
        {1..1000}
        |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;BigInteger.Pow(BigInteger(n), n))
        |&amp;gt; Digits.fromBigInt
        |&amp;gt; Seq.toArray

    Array.sub digits (digits.Length - 10) 10
    |&amp;gt; Digits.toInt64 &lt;span style="color: green"&gt;//just makes it easier to copy and paste result
&lt;/span&gt;&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8402211693493416472/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-48-find-last-ten-digits-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8402211693493416472'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8402211693493416472'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-48-find-last-ten-digits-of.html' title='Problem 48: Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8446118161033699790</id><published>2010-11-13T17:50:00.001-05:00</published><updated>2010-11-13T17:50:59.517-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 47: Find the first four consecutive integers to have four distinct primes factors. What is the first of these numbers?</title><content type='html'>&lt;p&gt;Not the best performing solution (perhaps inherently so, though), but a shining example of the power of functional composition (the hard work was done in implementing &lt;em&gt;cfactorize&lt;/em&gt; in a previous problem, everything else is just composing built-in functional operators).&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem47a =
    (Seq.initInfinite (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; let &lt;/span&gt;n = i+3 &lt;span style="color: blue"&gt;in &lt;/span&gt;(n, cfactorize n)) &lt;span style="color: green"&gt;//starting with 0+3=2
    &lt;/span&gt;|&amp;gt; Seq.windowed 4
    |&amp;gt; Seq.find (&lt;span style="color: blue"&gt;fun &lt;/span&gt;arr &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;arr |&amp;gt; Seq.forall (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(_,lst) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;lst |&amp;gt; List.length = 4))).[0]
    |&amp;gt; fst&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8446118161033699790/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-47-find-first-four-consecutive.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8446118161033699790'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8446118161033699790'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-47-find-first-four-consecutive.html' title='Problem 47: Find the first four consecutive integers to have four distinct primes factors. What is the first of these numbers?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8414407416999009651</id><published>2010-11-12T00:21:00.001-05:00</published><updated>2010-11-12T00:22:43.312-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 46: What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</title><content type='html'>&lt;p&gt;The difficult part of this problem was working around F#'s lack of break, continue, and return in for loops. &lt;em&gt;hasForm&lt;/em&gt; would be most easily expressed using nested for loops but would require break, continue, and return to perform acceptably. Another desire is support for infinite range expressions, so that &lt;em&gt;oddComposites&lt;/em&gt; could be written as &lt;em&gt;{9..2..} |&amp;gt; Seq.filter (isPrime&amp;gt;&amp;gt;not)&lt;/em&gt;.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem46b = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;form p s = p + 2*(s*s)

    &lt;span style="color: green"&gt;//making sure to exclude 1    
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;oddComposites = 
        Seq.initInfinite id 
        |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i &amp;lt;&amp;gt; 1 &amp;amp;&amp;amp; i%2=1 &amp;amp;&amp;amp; isPrime i |&amp;gt; not)
    
    &lt;span style="color: green"&gt;//cached for performance
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;primes = 
        Seq.initInfinite id 
        |&amp;gt; Seq.filter isPrime 
        |&amp;gt; Seq.cache

    &lt;span style="color: green"&gt;//exclusive
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;primesUpto n = 
        primes 
        |&amp;gt; Seq.takeWhile ((&amp;gt;=) n)

    &lt;span style="color: green"&gt;//think nested loops
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;hasForm n = 
        primesUpto n
        |&amp;gt; Seq.exists 
            (&lt;span style="color: blue"&gt;fun &lt;/span&gt;p &lt;span style="color: blue"&gt;-&amp;gt;
                &lt;/span&gt;({1..n-1} 
                |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;s &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;form p s)
                |&amp;gt; Seq.find (&lt;span style="color: blue"&gt;fun &lt;/span&gt;r &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(r = n) || (r &amp;gt; n))) = n)

    oddComposites
    |&amp;gt; Seq.find (hasForm&amp;gt;&amp;gt;not)&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8414407416999009651/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-46-what-is-smallest-odd.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8414407416999009651'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8414407416999009651'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/11/problem-46-what-is-smallest-odd.html' title='Problem 46: What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-6186386670216882791</id><published>2010-07-18T01:25:00.001-04:00</published><updated>2010-07-18T01:25:13.817-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 45: After 40755, what is the next triangle number that is also pentagonal and hexagonal?</title><content type='html'>&lt;p&gt;Here we reused the technique from Problem 44 for quickly asserting that a number is in the range of a function by verifying that n = f (f-1(n)).&amp;#160; We could also have tested that f-1(n) is integral.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem45a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;pent n = n*(3L*n-1L)/2L
    &lt;span style="color: blue"&gt;let &lt;/span&gt;pentInv n = (1L + sqrtL(24L*n + 1L))/6L
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isPent n = (n = (pent (pentInv n)))
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;hex n = n*(2L*n-1L)
    &lt;span style="color: blue"&gt;let &lt;/span&gt;hexInv n = (1L + sqrtL(8L*n + 1L))/4L
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isHex n = (n = (hex (hexInv n)))
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;tri n = n*(n+1L)/2L
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;triSeq n = seq {&lt;span style="color: blue"&gt;yield &lt;/span&gt;tri n; &lt;span style="color: blue"&gt;yield! &lt;/span&gt;triSeq (n+1L)}
    
    triSeq 286L
    |&amp;gt; Seq.find (&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;isPent n &amp;amp;&amp;amp; isHex n)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/6186386670216882791/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-45-after-40755-what-is-next.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6186386670216882791'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6186386670216882791'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-45-after-40755-what-is-next.html' title='Problem 45: After 40755, what is the next triangle number that is also pentagonal and hexagonal?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-945996778427885826</id><published>2010-07-17T19:25:00.001-04:00</published><updated>2010-07-17T19:27:28.072-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 44: Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?</title><content type='html'>&lt;p&gt;This problem was a big disappointment.&amp;#160; It turns out that the first pair you find for which their sum and difference is pentagonal is the solution.&amp;#160; The interesting yet difficult minimization of D is a complete waste of time.&amp;#160; More than that, the running time of the solution I came up with is beyond reach and to keep from overflows big numbers would be required.&amp;#160; Looking at the Project Euler forum, most users totally glossed over the requirement for the minimization of D, though a couple others did protest.&amp;#160; What follows is the theory and implementation for the true solution of this problem (which as I’ve pointed out, actually won’t ever produce the result because 1) integer overflow, and 2) unreachable running time even when we do use big numbers).&lt;/p&gt;  &lt;p&gt;&lt;em&gt;The derivative of p is linear (p' = (3n^s - n)/2), so p is strickly increasing. Therefore, if p(i-1) - p(i) &amp;gt; min {p(s) - p(t) where i &amp;gt; s &amp;gt; t and p(s) and p(t) are pentagonal numbers for which their sum and difference is pentaganol} then the right-hand side is the minimization D.&lt;/em&gt;&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem44a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;p n = n*(3*n-1)/2 &lt;span style="color: green"&gt;//p = (3n^2-n)/2
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;pinv n = (1 + sqrtn(24*n + 1))/6 &lt;span style="color: green"&gt;//inverse for positive range of p
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;isPentagonal t = t = (p (pinv t))
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;testPair p1 p2 = 
        (isPentagonal (p1-p2)) &amp;amp;&amp;amp; (isPentagonal (p1+p2))
            
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop n minDiff =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;pn = p n
        &lt;span style="color: blue"&gt;if &lt;/span&gt;((p (n+1)) - pn) &amp;gt; minDiff &lt;span style="color: blue"&gt;then &lt;/span&gt;minDiff
        &lt;span style="color: blue"&gt;else
            let rec &lt;/span&gt;find m = 
                &lt;span style="color: blue"&gt;let &lt;/span&gt;pm = p m
                &lt;span style="color: blue"&gt;if &lt;/span&gt;m = 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;None
                &lt;span style="color: blue"&gt;elif &lt;/span&gt;testPair pn pm &lt;span style="color: blue"&gt;then &lt;/span&gt;Some(pm)
                &lt;span style="color: blue"&gt;else &lt;/span&gt;find (m-1)
            &lt;span style="color: blue"&gt;match &lt;/span&gt;find (n-1) &lt;span style="color: blue"&gt;with
            &lt;/span&gt;| Some(pm) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;loop (n+1) (min (pn-pm) minDiff) &lt;span style="color: green"&gt;//take the first pair
            &lt;/span&gt;| None &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;loop (n+1) minDiff
    loop 2 System.Int32.MaxValue&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/945996778427885826/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-44-find-pair-of-pentagonal.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/945996778427885826'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/945996778427885826'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-44-find-pair-of-pentagonal.html' title='Problem 44: Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3900792429780672623</id><published>2010-07-04T11:16:00.001-04:00</published><updated>2010-07-04T11:17:37.004-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 43: Find the sum of all 0 to 9 pandigital numbers with the given property.</title><content type='html'>&lt;p&gt;Combining our &lt;em&gt;Digits&lt;/em&gt; and &lt;em&gt;permutations&lt;/em&gt; implementations with F#’s built-in &lt;em&gt;Seq&lt;/em&gt; functions, we really see how functional programming shines in describing complex algorithms simply.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem43a =  
    &lt;span style="color: blue"&gt;let &lt;/span&gt;hasProperty p = 
        &lt;span style="color: blue"&gt;let &lt;/span&gt;ddd = p |&amp;gt; Seq.skip 1
                    |&amp;gt; Seq.windowed 3
                    |&amp;gt; Seq.map Digits.toInt 
        
        Seq.zip ddd [2;3;5;7;11;13;17]
        |&amp;gt; Seq.forall (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(a,b) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;a % b = 0)
            
    permutationsAsc [0;1;2;3;4;5;6;7;8;9]
    |&amp;gt; Seq.filter hasProperty
    |&amp;gt; Seq.sumBy Digits.toInt64&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3900792429780672623/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-43-find-sum-of-all-0-to-9.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3900792429780672623'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3900792429780672623'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/07/problem-43-find-sum-of-all-0-to-9.html' title='Problem 43: Find the sum of all 0 to 9 pandigital numbers with the given property.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-716603685126584265</id><published>2010-06-29T08:31:00.001-04:00</published><updated>2010-07-05T23:53:21.492-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 42: How many triangle words does the list of common English words contain?</title><content type='html'>&lt;p&gt;This problem is designed to make use of several tools.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem42a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;triangle n = &lt;span style="color: blue"&gt;let &lt;/span&gt;n' = n |&amp;gt; float &lt;span style="color: blue"&gt;in &lt;/span&gt;(0.5)*(n')*(n'+1.) |&amp;gt; int
    &lt;span style="color: blue"&gt;let &lt;/span&gt;tseq = Seq.initInfinite (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;triangle (i+1)) |&amp;gt; Seq.cache
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;wordValue (s:string) = s |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(c |&amp;gt; int)-64)
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;text = System.IO.File.ReadAllText(&lt;span style="color: maroon"&gt;&amp;quot;words.txt&amp;quot;&lt;/span&gt;)
    &lt;span style="color: blue"&gt;let &lt;/span&gt;words = text.Split([|&lt;span style="color: maroon"&gt;','&lt;/span&gt;;&lt;span style="color: maroon"&gt;'&amp;quot;'&lt;/span&gt;|], System.StringSplitOptions.RemoveEmptyEntries) |&amp;gt; Seq.readonly
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isTriangleWord w =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;wv = wordValue w
        tseq
        |&amp;gt; Seq.takeWhile (&lt;span style="color: blue"&gt;fun &lt;/span&gt;t &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;t &amp;lt;= wv)
        |&amp;gt; Seq.exists ((=) wv)
        
    words
    |&amp;gt; Seq.filter isTriangleWord
    |&amp;gt; Seq.length&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/716603685126584265/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-42-how-many-triangle-words-does.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/716603685126584265'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/716603685126584265'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-42-how-many-triangle-words-does.html' title='Problem 42: How many triangle words does the list of common English words contain?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8922650231736827142</id><published>2010-06-22T01:03:00.001-04:00</published><updated>2010-07-03T16:27:48.097-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 41: What is the largest n-digit pandigital prime that exists?</title><content type='html'>&lt;p&gt;My first approach was to try and find the first odd number descending from 987654321 which was both prime and pandigital, but despite attempts at performance tweaks this would never finish executing.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem41a = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isPandigital n =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;dlist = n |&amp;gt; digits |&amp;gt; List.ofSeq
        (List.sort dlist) = [1..List.length dlist]
        
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop n =
        &lt;span style="color: blue"&gt;if &lt;/span&gt;isPrime n &amp;amp;&amp;amp; isPandigital n &lt;span style="color: blue"&gt;then &lt;/span&gt;n
        &lt;span style="color: blue"&gt;else &lt;/span&gt;loop (n-2)
    loop 987654321&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Then I realized I would have much better luck generating pandigital numbers and testing them for primality using the lexical permutation algorithm from Problem 24.&amp;#160; The following is a generic implementation with a immutable sequence wrapper.&lt;/p&gt;

&lt;p&gt;First we need a couple operators: &lt;em&gt;comparer&lt;/em&gt; converts an F# function into an IComparer so we can use the System.Array.Sort overload which allows in-place sub range sorting.&amp;#160; &lt;em&gt;flip&lt;/em&gt; reverses the parameters of two parameter functions.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;comparer f = { &lt;span style="color: blue"&gt;new &lt;/span&gt;System.Collections.Generic.IComparer&amp;lt;'a&amp;gt; &lt;span style="color: blue"&gt;with member &lt;/span&gt;self.Compare(x,y) = f x y }&lt;/pre&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;flip f x y = f y x&lt;/pre&gt;

&lt;p&gt;Next is our &lt;em&gt;permutations&lt;/em&gt; function which is generic and takes a comparison function.&amp;#160; The inner &lt;em&gt;permute&lt;/em&gt; function mutates the given &lt;em&gt;perm &lt;/em&gt;array returning &lt;em&gt;false&lt;/em&gt; when the array is at its last permutation.&amp;#160; Then a sequence expression is used to generate a sequence with immutable copies of the array after each permutation.&amp;#160; Finally, &lt;em&gt;permutationsAsc&lt;/em&gt; and &lt;em&gt;permutationsDesc&lt;/em&gt; are convenience partial applications of &lt;em&gt;permutations&lt;/em&gt;.&amp;#160; Despite the fact that the array is copied for each yield of the sequence, this performs quite well.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;permutations f e =
    &lt;span style="color: green"&gt;///Advances (mutating) perm to the next lexical permutation.
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;permute (perm:'a[]) (f: 'a&lt;span style="color: blue"&gt;-&amp;gt;&lt;/span&gt;'a&lt;span style="color: blue"&gt;-&amp;gt;&lt;/span&gt;int) (comparer:System.Collections.Generic.IComparer&amp;lt;'a&amp;gt;) : bool =
        &lt;span style="color: blue"&gt;try
            &lt;/span&gt;&lt;span style="color: green"&gt;//Find the longest &amp;quot;tail&amp;quot; that is ordered in decreasing order ((s+1)..perm.Length-1).
            //will throw an index out of bounds exception if perm is the last permuation,
            //but will not corrupt perm.
            &lt;/span&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i =
                &lt;span style="color: blue"&gt;if &lt;/span&gt;(f perm.[i] perm.[i-1]) &amp;gt;= 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;i-1
                &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i-1)
            &lt;span style="color: blue"&gt;let &lt;/span&gt;s = find (perm.Length-1)
            &lt;span style="color: blue"&gt;let &lt;/span&gt;s' = perm.[s]
            
            &lt;span style="color: green"&gt;//Change the number just before the tail (s') to the smallest number bigger than it in the tail (perm.[t]).
            &lt;/span&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i imin =
                &lt;span style="color: blue"&gt;if &lt;/span&gt;i = perm.Length &lt;span style="color: blue"&gt;then &lt;/span&gt;imin
                &lt;span style="color: blue"&gt;elif &lt;/span&gt;(f perm.[i] s') &amp;gt; 0 &amp;amp;&amp;amp; (f perm.[i] perm.[imin]) &amp;lt; 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;find (i+1) i
                &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1) imin
            &lt;span style="color: blue"&gt;let &lt;/span&gt;t = find (s+1) (s+1)
                
            perm.[s] &amp;lt;- perm.[t]
            perm.[t] &amp;lt;- s'

            &lt;span style="color: green"&gt;//Sort the tail in increasing order.
            &lt;/span&gt;System.Array.Sort(perm, s+1, perm.Length - s - 1, comparer)
            &lt;span style="color: blue"&gt;true
        with
        &lt;/span&gt;| _ &lt;span style="color: blue"&gt;-&amp;gt; false
       
    &lt;/span&gt;&lt;span style="color: green"&gt;//permuation sequence expression 
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;c = f |&amp;gt; comparer
    &lt;span style="color: blue"&gt;let &lt;/span&gt;freeze arr = arr |&amp;gt; Array.copy |&amp;gt; Seq.readonly
    seq { &lt;span style="color: blue"&gt;let &lt;/span&gt;e' = Seq.toArray e
          &lt;span style="color: blue"&gt;yield &lt;/span&gt;freeze e'
          &lt;span style="color: blue"&gt;while &lt;/span&gt;permute e' f c &lt;span style="color: blue"&gt;do
              yield &lt;/span&gt;freeze e' }
              
&lt;span style="color: blue"&gt;let &lt;/span&gt;permutationsAsc e = permutations compare e
&lt;span style="color: blue"&gt;let &lt;/span&gt;permutationsDesc e = permutations (flip compare) e&lt;/pre&gt;

&lt;p&gt;Now we have the solution to our problem.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem41c =    
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop n =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;maybe = 
            {n..(-1)..1}
            |&amp;gt; permutationsDesc
            |&amp;gt; Seq.map Digits.toInt
            |&amp;gt; Seq.tryFind isPrime
            
        &lt;span style="color: blue"&gt;match &lt;/span&gt;maybe &lt;span style="color: blue"&gt;with
        &lt;/span&gt;| Some(value) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;value
        | None &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;loop (n-1)
        
    loop 9&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;/em&gt;apparently if the sum of the digits of a number is divisible by 3 then the number cannot be prime.&amp;#160; This isn’t obvious to me, but it’s late so I’ll look into to it more tomorrow.&amp;#160; However, if we take this fact we find that the number of digits must then either be 4 or 7.&amp;#160; Applying the 7 digit upper bound, both solution (a) and (b) run instantaneously.&lt;/p&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8922650231736827142/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-42-what-is-largest-n-digit.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8922650231736827142'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8922650231736827142'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-42-what-is-largest-n-digit.html' title='Problem 41: What is the largest n-digit pandigital prime that exists?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2645886363979127157</id><published>2010-06-20T16:07:00.001-04:00</published><updated>2010-06-20T16:07:51.959-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 40: If dn represents the nth digit of the fractional part, find the value of the following expression. d1 * d10 * d100 * d1000 * d10000 * d100000 * d1000000</title><content type='html'>&lt;p&gt;An imperative solution seems appropriate.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem40a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;sb = System.Text.StringBuilder()
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;n = 1
    &lt;span style="color: blue"&gt;while &lt;/span&gt;sb.Length &amp;lt;= 1000000 &lt;span style="color: blue"&gt;do
        &lt;/span&gt;sb.Append(n) |&amp;gt; ignore
        n &amp;lt;- n+1
        
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;prod = 1
    &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..6 &lt;span style="color: blue"&gt;do
        &lt;/span&gt;prod &amp;lt;- prod * ((sb.[(pown 10 i)-1] |&amp;gt; int) - 48) 
        
    prod&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2645886363979127157/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-40-if-dn-represents-nth-digit.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2645886363979127157'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2645886363979127157'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-40-if-dn-represents-nth-digit.html' title='Problem 40: If dn represents the nth digit of the fractional part, find the value of the following expression. d1 * d10 * d100 * d1000 * d10000 * d100000 * d1000000'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3504964095345268688</id><published>2010-06-18T22:58:00.001-04:00</published><updated>2010-06-18T23:10:40.199-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 39: For which value of p ≤ 1000, is the number of solutions maximised?</title><content type='html'>&lt;p&gt;Brute force algorithm with no real optimizations.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem39c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;countTriplets p = 
        &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;count = 0
        &lt;span style="color: blue"&gt;for &lt;/span&gt;a &lt;span style="color: blue"&gt;in &lt;/span&gt;1..p &lt;span style="color: blue"&gt;do
            for &lt;/span&gt;b &lt;span style="color: blue"&gt;in &lt;/span&gt;a..p &lt;span style="color: blue"&gt;do
                let &lt;/span&gt;c = p - (a + b) |&amp;gt; float
                &lt;span style="color: blue"&gt;let &lt;/span&gt;c' = a*a + b*b |&amp;gt; float |&amp;gt; sqrtF
                &lt;span style="color: blue"&gt;if &lt;/span&gt;c = c' &lt;span style="color: blue"&gt;then
                    &lt;/span&gt;count &amp;lt;- count + 1
        count
        
    {1..1000}
    |&amp;gt; PSeq.maxBy countTriplets&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3504964095345268688/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-39-for-which-value-of-p-1000-is.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3504964095345268688'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3504964095345268688'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-39-for-which-value-of-p-1000-is.html' title='Problem 39: For which value of p ≤ 1000, is the number of solutions maximised?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2623266741535582038</id><published>2010-06-17T01:29:00.001-04:00</published><updated>2010-06-17T01:29:15.900-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 38: What is the largest 1 to 9 pandigital that can be formed by multiplying a fixed number by 1, 2, 3, ... ?</title><content type='html'>&lt;p&gt;Wow, interesting - tough!&amp;#160; And I finally found Seq.choose (I was looking for Seq.pickAll).&lt;/p&gt; &lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem38a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isPosPd (nstr:string) = &lt;span style="color: green"&gt;//we know our chars are digits
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;len = nstr |&amp;gt; Seq.length
        len = 9 
        &amp;amp;&amp;amp; (nstr.Contains(&lt;span style="color: maroon"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;) |&amp;gt; not) 
        &amp;amp;&amp;amp; len = (nstr |&amp;gt; Seq.distinct |&amp;gt; Seq.length)
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;tryFind n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop i =
            &lt;span style="color: blue"&gt;let &lt;/span&gt;prodConcats = (seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;1..i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;n*j |&amp;gt; string }) |&amp;gt; Seq.fold (+) &lt;span style="color: maroon"&gt;&amp;quot;&amp;quot;
            &lt;/span&gt;&lt;span style="color: blue"&gt;if &lt;/span&gt;isPosPd prodConcats &lt;span style="color: blue"&gt;then &lt;/span&gt;Some(prodConcats |&amp;gt; int)
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;i &amp;lt; 9 &lt;span style="color: blue"&gt;then &lt;/span&gt;loop (i+1)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;None
        loop 2 &lt;span style="color: green"&gt;//start with 2 since n &amp;gt; 1
        
    &lt;/span&gt;{1..9999} &lt;span style="color: green"&gt;//since n &amp;gt; 1, 9999 is clearly an upper limit
    &lt;/span&gt;|&amp;gt; PSeq.choose tryFind
    |&amp;gt; PSeq.max&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2623266741535582038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-38-what-is-largest-1-to-9.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2623266741535582038'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2623266741535582038'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-38-what-is-largest-1-to-9.html' title='Problem 38: What is the largest 1 to 9 pandigital that can be formed by multiplying a fixed number by 1, 2, 3, ... ?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-9130580040497390723</id><published>2010-06-16T22:18:00.001-04:00</published><updated>2010-07-03T16:41:52.672-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 37: Find the sum of all eleven primes that are both truncatable from left to right and right to left.</title><content type='html'>&lt;p&gt;Kind of a variation on Problem 35.&amp;#160; I was surprised by how fast it ran!&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem37a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isTruncatablePrime n =
        &lt;span style="color: blue"&gt;if &lt;/span&gt;n |&amp;gt; isPrime |&amp;gt; not &lt;span style="color: blue"&gt;then false
        else
            let &lt;/span&gt;digs = n |&amp;gt; Digits.fromInt
            &lt;span style="color: blue"&gt;let &lt;/span&gt;truncations =
                seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;1..(Seq.length digs)-1 &lt;span style="color: blue"&gt;-&amp;gt; 
                          &lt;/span&gt;digs |&amp;gt; Seq.take i |&amp;gt; Digits.toInt
                      &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;1..(Seq.length digs)-1 &lt;span style="color: blue"&gt;-&amp;gt; 
                          &lt;/span&gt;digs |&amp;gt; Seq.skip i |&amp;gt; Digits.toInt }
            Seq.forall isPrime truncations
            
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;odds n = seq {&lt;span style="color: blue"&gt;yield &lt;/span&gt;n; &lt;span style="color: blue"&gt;yield! &lt;/span&gt;odds (n+2)}
    odds 11 &lt;span style="color: green"&gt;//skip the single digit primes
    &lt;/span&gt;|&amp;gt; Seq.filter isTruncatablePrime
    |&amp;gt; Seq.take 11 &lt;span style="color: green"&gt;//we are given there are only 11
    &lt;/span&gt;|&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/9130580040497390723/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-37-find-sum-of-all-eleven.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/9130580040497390723'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/9130580040497390723'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-37-find-sum-of-all-eleven.html' title='Problem 37: Find the sum of all eleven primes that are both truncatable from left to right and right to left.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-5740262964754821219</id><published>2010-06-14T23:55:00.001-04:00</published><updated>2010-06-14T23:55:34.124-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 36: Find the sum of all numbers less than one million, which are palindromic in base 10 and base 2.</title><content type='html'>&lt;p&gt;Reusing isPalindrome from Problem 4 and leveraging System.Convert for obtaining the binary representation of a given decimal number, this problem is trivial.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem36a =
    {1..999999}
    |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(isPalindrome (n|&amp;gt;string)) &amp;amp;&amp;amp; (isPalindrome (System.Convert.ToString(n, 2))))
    |&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/5740262964754821219/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-36-find-sum-of-all-numbers-less.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5740262964754821219'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5740262964754821219'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-36-find-sum-of-all-numbers-less.html' title='Problem 36: Find the sum of all numbers less than one million, which are palindromic in base 10 and base 2.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3435123673172963520</id><published>2010-06-14T22:45:00.001-04:00</published><updated>2010-07-03T15:42:09.738-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 35: How many circular primes are there below one million?</title><content type='html'>&lt;p&gt;Now we get to use our Digits module.&amp;#160; The most interesting part of this algorithm is performing digit rotations (the assignment of &lt;em&gt;r&lt;/em&gt;), which went through several revisions before I got it just right.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem35c = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isCircularPrime n =
        &lt;span style="color: blue"&gt;if &lt;/span&gt;not (isPrime n) &lt;span style="color: blue"&gt;then false
        else 
            let &lt;/span&gt;digs = n |&amp;gt; Digits.fromInt
            &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop i = 
                &lt;span style="color: blue"&gt;if &lt;/span&gt;i = (Seq.length digs)-1 &lt;span style="color: blue"&gt;then true
                else
                    let &lt;/span&gt;i = i + 1
                    &lt;span style="color: blue"&gt;let &lt;/span&gt;r = &lt;span style="color: green"&gt;//rotate by i
                        &lt;/span&gt;Seq.append 
                            (digs |&amp;gt; Seq.skip i) 
                            (digs |&amp;gt; Seq.take i)
                        |&amp;gt; Digits.toInt
                    &lt;span style="color: blue"&gt;if &lt;/span&gt;isPrime r &lt;span style="color: blue"&gt;then &lt;/span&gt;loop i
                    &lt;span style="color: blue"&gt;else
                        false
            &lt;/span&gt;loop 0

    &lt;span style="color: green"&gt;//we are given that there are 13 such primes below 100
    &lt;/span&gt;({101..2..999999}
    |&amp;gt; Seq.filter isCircularPrime
    |&amp;gt; Seq.length) + 13&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3435123673172963520/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-35-how-many-circular-primes-are.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3435123673172963520'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3435123673172963520'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-35-how-many-circular-primes-are.html' title='Problem 35: How many circular primes are there below one million?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1602535629865545701</id><published>2010-06-14T18:06:00.001-04:00</published><updated>2010-11-22T23:06:56.857-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Digits</title><content type='html'>&lt;p&gt;We’ve had a lot of problems involving digit manipulation and so far have implemented ad-hoc string parsing solutions.&amp;#160; But this approach is generally pretty slow.&amp;#160; For primitive integer types (int32 and int64), we can gain two to three times speed increase using arithmetic methods.&amp;#160; On the other hand, generating a sequence of digits from a bigint is actually faster using the former method.&amp;#160; The following module provides type optimized conversions between digit sequences and numbers.&lt;/p&gt;   &lt;pre class="code"&gt;    &lt;span style="color: blue"&gt;module &lt;/span&gt;Digits =
        &lt;span style="color: green"&gt;//at least twice as fast as fastParse
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;fromInt64 (n:int64) =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 0L &lt;span style="color: blue"&gt;then &lt;/span&gt;Seq.singleton 0
            &lt;span style="color: blue"&gt;else
                let mutable &lt;/span&gt;n = &lt;span style="color: blue"&gt;if &lt;/span&gt;n &amp;lt; 0L &lt;span style="color: blue"&gt;then &lt;/span&gt;(abs n) &lt;span style="color: blue"&gt;else &lt;/span&gt;n
                &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;powten = 0
                
                &lt;span style="color: blue"&gt;while &lt;/span&gt;(n/(pown 10L powten) &amp;gt;= 10L) &lt;span style="color: blue"&gt;do
                    &lt;/span&gt;powten &amp;lt;- powten+1
                    
                &lt;span style="color: blue"&gt;let &lt;/span&gt;darr = Array.create (powten+1) 0
                &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;i = 0
                &lt;span style="color: blue"&gt;while &lt;/span&gt;(powten &amp;gt;= 0) &lt;span style="color: blue"&gt;do
                    let &lt;/span&gt;d = n/(pown 10L powten)
                    darr.[i] &amp;lt;- d |&amp;gt; int
                    n &amp;lt;- n - d*(pown 10L powten)
                    i &amp;lt;- i + 1
                    powten &amp;lt;- powten-1
                    
                Seq.readonly darr
                            
        &lt;span style="color: blue"&gt;let &lt;/span&gt;fromInt (n:int) = fromInt64 (n |&amp;gt; int64)
        
        &lt;span style="color: green"&gt;///parse a positive or negative number string.  if other characters (besides leading '-'
        ///and integers) are present results will be unpredictable.
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;uncheckedParse (nstr:string) =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;nstr.[0] = &lt;span style="color: maroon"&gt;'-' &lt;/span&gt;&lt;span style="color: blue"&gt;then &lt;/span&gt;&lt;span style="color: green"&gt;//fast with least num checks
                &lt;/span&gt;nstr
                |&amp;gt; Seq.skip 1
                |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(c |&amp;gt; int) - 48)
                |&amp;gt; Seq.cache
            &lt;span style="color: blue"&gt;else
                &lt;/span&gt;nstr
                |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(c |&amp;gt; int) - 48)
                |&amp;gt; Seq.cache
        
        &lt;span style="color: green"&gt;///filter out non-digits
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;parse nstr = 
            uncheckedParse nstr
            |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 10)
        
        &lt;span style="color: green"&gt;//not sure if using fromString here is faster than direct map string |&amp;gt; parse
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;fromBigInt (n:bigint) = n |&amp;gt; string |&amp;gt; uncheckedParse
                
        &lt;span style="color: blue"&gt;let &lt;/span&gt;toInt64 (digs:seq&amp;lt;int&amp;gt;) = 
            digs
            |&amp;gt; Seq.fold 
                (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(e, sum) d &lt;span style="color: blue"&gt;-&amp;gt; let &lt;/span&gt;e = e-1 &lt;span style="color: blue"&gt;in &lt;/span&gt;(e, Checked.(+) sum ((d |&amp;gt; int64)*(pown 10L e))))
                (Seq.length digs, 0L)
            |&amp;gt; snd
                    
        &lt;span style="color: green"&gt;///note: (System.Int32.MinValue) |&amp;gt; Digits.fromInt |&amp;gt; Digits.toInt results
        ///in overflow exceptions since abs(int.MinValue) &amp;gt; int.MaxValue
        &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;toInt (digs:seq&amp;lt;int&amp;gt;) = 
            digs
            |&amp;gt; Seq.fold 
                (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(e, sum) d &lt;span style="color: blue"&gt;-&amp;gt; let &lt;/span&gt;e = e-1 &lt;span style="color: blue"&gt;in &lt;/span&gt;(e, Checked.(+) sum (d*(pown 10 e))))
                (Seq.length digs, 0)
            |&amp;gt; snd
        
        &lt;span style="color: blue"&gt;open &lt;/span&gt;System.Text
        &lt;span style="color: blue"&gt;let &lt;/span&gt;toBigInt (digs:seq&amp;lt;int&amp;gt;) = 
            bigint.Parse(
                digs 
                |&amp;gt; Seq.fold (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(sb:StringBuilder) d &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;ignore &amp;lt;| sb.Append(d) ; sb) (StringBuilder())
                |&amp;gt; string
            ) &lt;span style="color: green"&gt;//not sure if actually fast for bigint
&lt;/span&gt;&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1602535629865545701/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/digits.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1602535629865545701'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1602535629865545701'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/digits.html' title='Digits'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8726457924209961878</id><published>2010-06-12T21:42:00.001-04:00</published><updated>2010-06-12T21:47:33.377-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 34: Find the sum of all numbers which are equal to the sum of the factorial of their digits.</title><content type='html'>&lt;p&gt;The upper bound is 2540160, since (factorial 9)*7 = 2540160 and (factorial 9)^x grows faster than 10^x for x &amp;gt;= 7.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem34b =   
    {3..2540160}
    |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i = (i |&amp;gt; string |&amp;gt; Seq.map (string &amp;gt;&amp;gt; int) |&amp;gt; Seq.sumBy factorial))
    |&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8726457924209961878/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-34-find-sum-of-all-numbers.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8726457924209961878'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8726457924209961878'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-34-find-sum-of-all-numbers.html' title='Problem 34: Find the sum of all numbers which are equal to the sum of the factorial of their digits.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1987254286476821982</id><published>2010-06-11T20:11:00.001-04:00</published><updated>2010-07-03T15:30:55.027-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 33: Discover all the fractions with an unorthodox cancelling method.</title><content type='html'>&lt;p&gt;With F#, there are two ways to solve this: the easy way, and the slightly easier way.&amp;#160; The first way, we’ll work entirely with integers, including an implementation of &lt;em&gt;gcd&lt;/em&gt; using the Euclid’s algorithm for reducing our final fraction.&lt;/p&gt;  &lt;p&gt;&lt;em&gt;gcd&lt;/em&gt; and accompanying &lt;em&gt;abs&lt;/em&gt; are a sure candidates for inclusion in our Numerics module.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;abs (g:G&amp;lt;'a&amp;gt;) n = 
    &lt;span style="color: blue"&gt;if &lt;/span&gt;n &amp;lt; g.zero &lt;span style="color: blue"&gt;then &lt;/span&gt;n*g.negone &lt;span style="color: blue"&gt;else &lt;/span&gt;n
    &lt;span style="color: green"&gt;
&lt;/span&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;gcd (g:G&amp;lt;'a&amp;gt;) n m =
    &lt;span style="color: blue"&gt;if &lt;/span&gt;n = g.zero || m = g.zero &lt;span style="color: blue"&gt;then 
        &lt;/span&gt;raise (System.ArgumentOutOfRangeException(&lt;span style="color: maroon"&gt;&amp;quot;n and m must non-zero&amp;quot;&lt;/span&gt;))
    &lt;span style="color: blue"&gt;else
        let rec &lt;/span&gt;gcd n m = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = m &lt;span style="color: blue"&gt;then &lt;/span&gt;n
            &lt;span style="color: blue"&gt;else
                if &lt;/span&gt;n &amp;gt; m &lt;span style="color: blue"&gt;then &lt;/span&gt;gcd (n-m) m
                &lt;span style="color: blue"&gt;else &lt;/span&gt;gcd n (m-n)
        gcd (abs g n) (abs g m)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;And then our solution is fairly straightforward:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem33a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;unorthodoxPairs =
        [&lt;span style="color: blue"&gt;for &lt;/span&gt;numer = 10 &lt;span style="color: blue"&gt;to &lt;/span&gt;99 &lt;span style="color: blue"&gt;do
            for &lt;/span&gt;denom = (numer+1) &lt;span style="color: blue"&gt;to &lt;/span&gt;99 &lt;span style="color: blue"&gt;do
                let &lt;/span&gt;reduced = (numer |&amp;gt; float)/(denom |&amp;gt; float)
                &lt;span style="color: blue"&gt;let &lt;/span&gt;digitPair n = &lt;span style="color: green"&gt;//decompose digit list of n into a pair
                    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;nDigits = n |&amp;gt; string |&amp;gt; Seq.map (string &amp;gt;&amp;gt; float) |&amp;gt; Seq.toArray
                    (nDigits.[0], nDigits.[1])
                &lt;span style="color: blue"&gt;let &lt;/span&gt;(a,b) = digitPair numer
                &lt;span style="color: blue"&gt;let &lt;/span&gt;(c,d) = digitPair denom
                &lt;span style="color: blue"&gt;let &lt;/span&gt;isUnorthodox w x y z = (w/x) = 1. &amp;amp;&amp;amp; (y/z) = reduced
                &lt;span style="color: blue"&gt;if &lt;/span&gt;isUnorthodox a c b d || 
                   isUnorthodox a d b c || 
                   isUnorthodox b d a c || 
                   isUnorthodox b c a d &lt;span style="color: blue"&gt;then yield &lt;/span&gt;(numer, denom)]
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;product = unorthodoxPairs |&amp;gt; List.fold (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(w,x) (y,z) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(w*y,x*z)) (1,1)
    snd product / (gcd (fst product) (snd product)) &lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Next is our very easy solution which takes advantage of BigRational included in the F# PowerPack:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem33b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;unorthodoxPairs =
        [&lt;span style="color: blue"&gt;for &lt;/span&gt;numer = 10 &lt;span style="color: blue"&gt;to &lt;/span&gt;99 &lt;span style="color: blue"&gt;do
            for &lt;/span&gt;denom = (numer+1) &lt;span style="color: blue"&gt;to &lt;/span&gt;99 &lt;span style="color: blue"&gt;do
                let &lt;/span&gt;reduced = (numer |&amp;gt; float)/(denom |&amp;gt; float)
                &lt;span style="color: blue"&gt;let &lt;/span&gt;digitPair n = &lt;span style="color: green"&gt;//decompose digit list of n into a pair
                    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;nDigits = n |&amp;gt; string |&amp;gt; Seq.map (string &amp;gt;&amp;gt; float) |&amp;gt; Seq.toArray
                    (nDigits.[0], nDigits.[1])
                &lt;span style="color: blue"&gt;let &lt;/span&gt;(a,b) = digitPair numer
                &lt;span style="color: blue"&gt;let &lt;/span&gt;(c,d) = digitPair denom
                &lt;span style="color: blue"&gt;let &lt;/span&gt;isUnorthodox w x y z = (w/x) = 1. &amp;amp;&amp;amp; (y/z) = reduced
                &lt;span style="color: blue"&gt;if &lt;/span&gt;isUnorthodox a c b d || 
                   isUnorthodox a d b c || 
                   isUnorthodox b d a c || 
                   isUnorthodox b c a d &lt;span style="color: blue"&gt;then yield &lt;/span&gt;BigRational.Parse(sprintf &lt;span style="color: maroon"&gt;&amp;quot;%d/%d&amp;quot; &lt;/span&gt;numer denom)]
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;product = unorthodoxPairs |&amp;gt; List.fold (*) 1N
    product.Denominator&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Here’s a third version which avoids string parsing and the need for conversions between int and float:&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem33c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;unorthodoxPairs =
        [&lt;span style="color: blue"&gt;for &lt;/span&gt;numer = 10. &lt;span style="color: blue"&gt;to &lt;/span&gt;99. &lt;span style="color: blue"&gt;do
            for &lt;/span&gt;denom = (numer+1.) &lt;span style="color: blue"&gt;to &lt;/span&gt;99. &lt;span style="color: blue"&gt;do                
                let &lt;/span&gt;digitPair n =
                    &lt;span style="color: blue"&gt;let &lt;/span&gt;tensPlace = System.Math.Truncate(n/10.)
                    (tensPlace, n-tensPlace*10.)    

                &lt;span style="color: blue"&gt;let &lt;/span&gt;(a,b) = digitPair numer
                &lt;span style="color: blue"&gt;let &lt;/span&gt;(c,d) = digitPair denom

                &lt;span style="color: blue"&gt;let &lt;/span&gt;isUnorthodox w x y z = (w/x) = 1. &amp;amp;&amp;amp; (y/z) = numer/denom
                &lt;span style="color: blue"&gt;if &lt;/span&gt;isUnorthodox a c b d || 
                   isUnorthodox a d b c || 
                   isUnorthodox b d a c || 
                   isUnorthodox b c a d &lt;span style="color: blue"&gt;then yield &lt;/span&gt;BigRational.Parse(sprintf &lt;span style="color: maroon"&gt;&amp;quot;%.0f/%.0f&amp;quot; &lt;/span&gt;numer denom)]
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;product = unorthodoxPairs |&amp;gt; List.fold (*) 1N
    product.Denominator&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1987254286476821982/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-33-discover-all-fractions-with.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1987254286476821982'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1987254286476821982'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-33-discover-all-fractions-with.html' title='Problem 33: Discover all the fractions with an unorthodox cancelling method.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-5852366627908874949</id><published>2010-06-04T21:57:00.001-04:00</published><updated>2010-06-08T22:29:28.095-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 32: Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.</title><content type='html'>&lt;p&gt;While having lots of pieces, this problem is mostly straightforward.&amp;#160; The only part that required any analysis is determining sufficient lower and upper bounds for the product, since the worst case range (1 to 999999999) is far too large.&amp;#160; Letting p be the product, mn be the multiplican, and mr be the multiplier, we observe that if mn * mr = p, then (len p) = ((len mn) + (len mr)) + (-1 or 0).&amp;#160; Which implies the length of the product is cannot be less than 4 or greater than 5 or we will have either too few or too many digits in our pandigital set. Thus the range&amp;#160; may be restricted to 1234 to 98765.&lt;/p&gt; &lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem32c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;hasDistinctPositiveDigits (nstr:string) = 
        not (nstr.Contains(&lt;span style="color: maroon"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)) &amp;amp;&amp;amp; nstr.Length = (nstr |&amp;gt; Seq.distinct |&amp;gt; Seq.length)
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isPositivePanDigitalSet mnstr mrstr pstr =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;concatedDigitStr:string = mnstr + mrstr + pstr
        concatedDigitStr.Length = 9 &amp;amp;&amp;amp; hasDistinctPositiveDigits concatedDigitStr
        
    &lt;span style="color: blue"&gt;let &lt;/span&gt;findPositivePanDigitalSet p =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;pstr = p |&amp;gt; string
        &lt;span style="color: blue"&gt;if &lt;/span&gt;not (hasDistinctPositiveDigits pstr) &lt;span style="color: blue"&gt;then &lt;/span&gt;None
        &lt;span style="color: blue"&gt;else
            let &lt;/span&gt;sr = sqrtn p
            &lt;span style="color: blue"&gt;let rec &lt;/span&gt;loop mn =
                &lt;span style="color: blue"&gt;if &lt;/span&gt;mn &amp;gt; sr &lt;span style="color: blue"&gt;then &lt;/span&gt;None
                &lt;span style="color: blue"&gt;elif &lt;/span&gt;p % mn = 0 &lt;span style="color: blue"&gt;then
                    let &lt;/span&gt;mr = p/mn
                    &lt;span style="color: blue"&gt;if &lt;/span&gt;isPositivePanDigitalSet (mn |&amp;gt; string) (mr |&amp;gt; string) pstr &lt;span style="color: blue"&gt;then 
                        &lt;/span&gt;Some(mn, mr, p) 
                    &lt;span style="color: blue"&gt;else &lt;/span&gt;loop (mn + 1)
                &lt;span style="color: blue"&gt;else &lt;/span&gt;loop (mn + 1)
            loop 2
    
    {1234..98765} &lt;span style="color: green"&gt;//product must be between 4 and 5 digits
    &lt;/span&gt;|&amp;gt; Seq.map findPositivePanDigitalSet
    |&amp;gt; Seq.filter Option.isSome
    |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(Some(_,_,p)) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;p)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/5852366627908874949/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-32.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5852366627908874949'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5852366627908874949'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-32.html' title='Problem 32: Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4427254085983436959</id><published>2010-06-02T22:44:00.001-04:00</published><updated>2010-06-04T21:04:57.056-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 31: How many different ways can £2 be made using any number of coins?</title><content type='html'>&lt;p&gt;More fun with recursive sequence expressions! In this solution, we generate all of the combinations instead of only counting them.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem31c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;combinations amt coins = &lt;span style="color: green"&gt;//produce all ascending combinations starting with start
        &lt;/span&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;combinations combo =
            seq{ &lt;span style="color: blue"&gt;let &lt;/span&gt;sum = List.sum combo
                 &lt;span style="color: blue"&gt;if &lt;/span&gt;sum = amt &lt;span style="color: blue"&gt;then 
                     yield &lt;/span&gt;combo
                 &lt;span style="color: blue"&gt;elif &lt;/span&gt;sum &amp;lt; amt &lt;span style="color: blue"&gt;then 
                     yield! &lt;/span&gt;coins 
                            |&amp;gt; Seq.filter ((&amp;lt;=) combo.Head) &lt;span style="color: green"&gt;//to generate combinations instead permutations
                            &lt;/span&gt;|&amp;gt; Seq.collect (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;combinations (c::combo)) }
        seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;start &lt;span style="color: blue"&gt;in &lt;/span&gt;coins &lt;span style="color: blue"&gt;do yield! &lt;/span&gt;combinations [start]}  &lt;span style="color: green"&gt;//concat all ascending combinations for each start
    &lt;/span&gt;combinations 200 [1;2;5;10;20;50;100;200] |&amp;gt; Seq.length&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4427254085983436959/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-31-how-many-different-ways-can.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4427254085983436959'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4427254085983436959'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/06/problem-31-how-many-different-ways-can.html' title='Problem 31: How many different ways can £2 be made using any number of coins?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3765757602732189175</id><published>2010-05-30T10:52:00.001-04:00</published><updated>2010-06-08T22:42:25.608-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 30: Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</title><content type='html'>&lt;p&gt;&lt;/p&gt;  &lt;p&gt;We must find an upper limit for numbers to search.&amp;#160; As the length of a number increases, 9**5 is the greatest additional contribution a digit can make to the sum of 5th power digits. Meanwhile, the number itself is increasing by powers of 10, which will eventually overcome the rate of increase given summing 5th powers of digits.&amp;#160; So, when we find that the sum of 5th power digits of 9999999 (of length 7) equals 413343 (of length 6), we can be sure that no higher number can produce 5th power digit sum of sufficient length.&amp;#160; (a non-rigorous proof, I know).&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem30a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;powdigsum n e = n |&amp;gt; string |&amp;gt; Seq.map(string &amp;gt;&amp;gt; int32) |&amp;gt; Seq.sumBy(&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;pown i e)
    {2..9999999}
    |&amp;gt; Seq.filter(&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(powdigsum n 5) = n)
    |&amp;gt; Seq.sum&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3765757602732189175/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-30-find-sum-of-all-numbers-that.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3765757602732189175'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3765757602732189175'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-30-find-sum-of-all-numbers-that.html' title='Problem 30: Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2986786045533945395</id><published>2010-05-29T12:17:00.001-04:00</published><updated>2010-05-29T12:17:09.192-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 29: How many distinct terms are in the sequence generated by a^(b) for 2 ≤ a  ≤ 100 and 2 ≤ b  ≤ 100?</title><content type='html'>&lt;p&gt;Too easy.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem29a =
    seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;a &lt;span style="color: blue"&gt;in &lt;/span&gt;2I..100I &lt;span style="color: blue"&gt;do for &lt;/span&gt;b &lt;span style="color: blue"&gt;in &lt;/span&gt;2..100 &lt;span style="color: blue"&gt;do yield &lt;/span&gt;bigint.Pow(a,b)}
    |&amp;gt; Seq.distinct 
    |&amp;gt; Seq.length&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2986786045533945395/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-29-how-many-distinct-terms-are.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2986786045533945395'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2986786045533945395'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-29-how-many-distinct-terms-are.html' title='Problem 29: How many distinct terms are in the sequence generated by a^(b) for 2 ≤ a  ≤ 100 and 2 ≤ b  ≤ 100?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1300548558326451910</id><published>2010-05-29T10:52:00.001-04:00</published><updated>2010-05-29T18:50:41.409-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 28: What is the sum of the numbers on the diagonals in a 1001 by 1001 number spiral?</title><content type='html'>&lt;p&gt;Another pleasant one where by writing down the first few terms of the sequence (by dimension) of sequences (corners in a dimension), it was easy to spot a recursive pattern based on the last element of the previous sequence.&amp;#160; The neatest part is how apt recursive sequence expressions are for capturing this algorithm.&amp;#160; For interest, I show my first-pass solution followed by a refactored version.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem28a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;diags upperdim =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;diags dim prev =
            seq { &lt;span style="color: blue"&gt;let &lt;/span&gt;prev = (dim-1) + prev
                  &lt;span style="color: blue"&gt;yield &lt;/span&gt;prev
                  &lt;span style="color: blue"&gt;let &lt;/span&gt;prev = (dim-1) + prev
                  &lt;span style="color: blue"&gt;yield &lt;/span&gt;prev
                  &lt;span style="color: blue"&gt;let &lt;/span&gt;prev = (dim-1) + prev
                  &lt;span style="color: blue"&gt;yield &lt;/span&gt;prev
                  &lt;span style="color: blue"&gt;let &lt;/span&gt;prev = (dim-1) + prev
                  &lt;span style="color: blue"&gt;yield &lt;/span&gt;prev
                  &lt;span style="color: blue"&gt;if &lt;/span&gt;dim &amp;lt;&amp;gt; upperdim &lt;span style="color: blue"&gt;then 
                    yield! &lt;/span&gt;diags (dim+2) prev }
        diags 3 1
    (diags 1001 |&amp;gt; Seq.sum) + 1 &lt;span style="color: green"&gt;//add center 1
                
&lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem28b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;diags upperdim =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;diags dim prev =
            seq { &lt;span style="color: blue"&gt;let &lt;/span&gt;next i = i*(dim-1) + prev
                  &lt;span style="color: blue"&gt;yield! &lt;/span&gt;{1..4} |&amp;gt; Seq.map next
                  &lt;span style="color: blue"&gt;if &lt;/span&gt;dim &amp;lt;&amp;gt; upperdim &lt;span style="color: blue"&gt;then 
                    yield! &lt;/span&gt;diags (dim+2) (next 4) }
        diags 3 1
    (diags 1001 |&amp;gt; Seq.sum) + 1 &lt;span style="color: green"&gt;//add center 1&lt;/span&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;The next two versions use an infinite sequence which includes the center 1.&amp;#160; The later of the two takes advantage of the fact that it’s easy to count how many terms we need to sum.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem28c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;diags =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;diags dim prev =
            seq { &lt;span style="color: blue"&gt;let &lt;/span&gt;next i = (dim, i*(dim-1) + prev)
                  &lt;span style="color: blue"&gt;yield! &lt;/span&gt;{1..4} |&amp;gt; Seq.map next
                  &lt;span style="color: blue"&gt;yield! &lt;/span&gt;diags (dim+2) (next 4 |&amp;gt; snd) }
        seq { &lt;span style="color: blue"&gt;yield &lt;/span&gt;(1,1) ; &lt;span style="color: blue"&gt;yield! &lt;/span&gt;diags 3 1 }
    diags |&amp;gt; Seq.takeWhile(&lt;span style="color: blue"&gt;fun &lt;/span&gt;(dim,_)  &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;dim &amp;lt;= 1001) |&amp;gt; Seq.sumBy snd
    
&lt;span style="color: blue"&gt;let &lt;/span&gt;problem28d =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;diags =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;diags dim prev =
            seq { &lt;span style="color: blue"&gt;let &lt;/span&gt;next i = i*(dim-1) + prev
                  &lt;span style="color: blue"&gt;yield! &lt;/span&gt;{1..4} |&amp;gt; Seq.map next
                  &lt;span style="color: blue"&gt;yield! &lt;/span&gt;diags (dim+2) (next 4) }
        seq { &lt;span style="color: blue"&gt;yield &lt;/span&gt;1 ; &lt;span style="color: blue"&gt;yield! &lt;/span&gt;diags 3 1 }
    diags |&amp;gt; Seq.take((4*500)+1) |&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1300548558326451910/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-28-what-is-sum-of-numbers-on.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1300548558326451910'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1300548558326451910'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-28-what-is-sum-of-numbers-on.html' title='Problem 28: What is the sum of the numbers on the diagonals in a 1001 by 1001 number spiral?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-5317387883163358997</id><published>2010-05-28T22:48:00.001-04:00</published><updated>2010-05-29T09:34:55.799-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 27: Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.</title><content type='html'>&lt;p&gt;This one was straight forward, just had to follow instructions (I didn’t apply any mathematical optimizations, because it looked like if once I got started, I’d be able to solve it all by hand).&amp;#160; I needed to adjust &lt;em&gt;isPrime&lt;/em&gt; to return false for values of &lt;em&gt;n&lt;/em&gt; less than 2.&amp;#160; I got carried away implementing it SQL style; one long run-on sentence (excluding &lt;em&gt;problem27a&lt;/em&gt;, not a single let binding!).&amp;#160; Parallelization improves speed by about 25 percent.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem27a =
    seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;a &lt;span style="color: blue"&gt;in &lt;/span&gt;-999..999 &lt;span style="color: blue"&gt;do for &lt;/span&gt;b &lt;span style="color: blue"&gt;in &lt;/span&gt;-999..999 &lt;span style="color: blue"&gt;do yield &lt;/span&gt;(a,b) }
    |&amp;gt; PSeq.map(&lt;span style="color: blue"&gt;fun &lt;/span&gt;(a,b) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(a*b, Seq.initInfinite id
                                   |&amp;gt; Seq.takeWhile (&lt;span style="color: blue"&gt;fun &lt;/span&gt;n &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;n*n + a*n + b |&amp;gt; isPrime)
                                   |&amp;gt; Seq.length))
    |&amp;gt; PSeq.maxBy snd
    |&amp;gt; fst&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/5317387883163358997/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-27-find-product-of-coefficients.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5317387883163358997'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5317387883163358997'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-27-find-product-of-coefficients.html' title='Problem 27: Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1423525409244449230</id><published>2010-05-27T20:38:00.001-04:00</published><updated>2010-05-28T07:54:56.371-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 26: Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.</title><content type='html'>&lt;p&gt;After taking a break for a few days, having spent 3 consecutive weeks solving problems 1-25 every free hour and deep into the night, this turned out to be a pleasant return despite it’s intimidating appearance.&amp;#160; I simply worked out the first 7 values of &lt;em&gt;d&lt;/em&gt; on paper using long division, spotted a pattern corresponding to recurring cycle lengths, and churned out an implementation of the algorithm in F#.&amp;#160; I am finding that looping via recursion is a very gentle way to implement algorithms: you simply reason out each case one at a time and return when you come to the end of a branch.&amp;#160; No worrying what happens next, just pass it on.&lt;/p&gt; &lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem26c =     
    &lt;span style="color: blue"&gt;let &lt;/span&gt;cycleLength d =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;cycleLength (steps:ResizeArray&amp;lt;int&amp;gt;) step =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;d &amp;gt; step &lt;span style="color: blue"&gt;then 
                &lt;/span&gt;cycleLength steps (step*10)
            &lt;span style="color: blue"&gt;else 
                if &lt;/span&gt;steps.Contains(step) &lt;span style="color: blue"&gt;then
                    &lt;/span&gt;(d, steps.Count - steps.IndexOf(step))
                &lt;span style="color: blue"&gt;else
                    &lt;/span&gt;steps.Add(step)
                    &lt;span style="color: blue"&gt;let &lt;/span&gt;step = step - d*(step/d)
                    &lt;span style="color: blue"&gt;if &lt;/span&gt;step = 0 &lt;span style="color: blue"&gt;then
                        &lt;/span&gt;(d, 0)
                    &lt;span style="color: blue"&gt;else
                        &lt;/span&gt;cycleLength steps step
        cycleLength (ResizeArray&amp;lt;int&amp;gt;()) 1
    &lt;span style="color: green"&gt;//on dual core, runs in 60ms vs. 90ms when parallelized, 
    //and twice as fast with larger ranges
    &lt;/span&gt;{2..999}
    |&amp;gt; PSeq.map cycleLength 
    |&amp;gt; PSeq.maxBy snd 
    |&amp;gt; fst&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1423525409244449230/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-26-find-value-of-d-1000-for.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1423525409244449230'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1423525409244449230'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-26-find-value-of-d-1000-for.html' title='Problem 26: Find the value of d &amp;lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-6263769181934290948</id><published>2010-05-27T00:29:00.001-04:00</published><updated>2010-11-12T00:30:46.437-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Parallelization with PLINQ</title><content type='html'>&lt;p&gt;The past couple of days I've been interested in exploring PLINQ with F#.&amp;#160; But Since I’m using F# 2.0 for Visual Studio 2008 (i.e. .NET 2.0 build), I had to 1) Install the 3.5 SP1 Reactive Extensions (Rx) for .NET which include a back-port of PLINQ (&lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx&lt;/a&gt;), and 2) Download the F# PowerPack 2.0 May 2010 source code (&lt;a href="http://fsharppowerpack.codeplex.com/SourceControl/list/changesets"&gt;http://fsharppowerpack.codeplex.com/SourceControl/list/changesets&lt;/a&gt;) and compile the Parallel.Seq project after adding a reference to System.Threading (which was augmented by Rx), then 3) reference the dll in my ProjectEuler project and open Microsoft.FSharp.Collections. &lt;/p&gt;  &lt;p&gt;Problem 10 is a perfect candidate for parallelization, since addition is commutative.&amp;#160; The following parallelized version of Problem 10 literally runs twice as fast on my dual core processor than the (nearly) identical non-parallelized version (b).&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem10e = 
    ({3..2..1999999}
    |&amp;gt; PSeq.filter isPrime
    |&amp;gt; PSeq.sumBy int64) + 2L&lt;/pre&gt;

&lt;p&gt;To highlight how simple and effective PLINQ is, consider the following attempt at manually parallelizing using F# async workflows.&amp;#160; Because of the overhead involved in trying to parallelize 2 million tasks in one batch, this version actually runs 3 times slower than version (b).&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem10c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;asyncIsPrime i = async { &lt;span style="color: blue"&gt;if &lt;/span&gt;i |&amp;gt; isPrime &lt;span style="color: blue"&gt;then return &lt;/span&gt;i &lt;span style="color: blue"&gt;else return &lt;/span&gt;0 }&lt;span style="color: green"&gt;
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;tasks = seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;3..2..1999999 &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;asyncIsPrime i}
    ((Async.RunSynchronously (Async.Parallel tasks)) |&amp;gt; Seq.filter((&amp;lt;) 0) |&amp;gt; Seq.sumBy(int64)) + 2L&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/6263769181934290948/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/plinq.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6263769181934290948'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6263769181934290948'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/plinq.html' title='Parallelization with PLINQ'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-186237575886241271</id><published>2010-05-22T01:33:00.001-04:00</published><updated>2010-05-22T15:24:19.903-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 25: What is the first term in the Fibonacci sequence to contain 1000 digits?</title><content type='html'>&lt;p&gt;The key to this one, unlike the traditional non-tail-recursive definition of the Fibonacci sequence, is to generate the next element in the sequence given the previous two.&amp;#160; &lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem25a =
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find n1 n2 term =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;n0 = n1 + n2
        &lt;span style="color: blue"&gt;if &lt;/span&gt;(n0 |&amp;gt; string).Length = 1000 &lt;span style="color: blue"&gt;then &lt;/span&gt;term
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find n0 n1 (term+1)
    find 1I 1I 3&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Playing around with recursive sequences, I came up with this neat solution which runs on average the same as solution (a).&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem25b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;fibseq =    
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;fibseq n1 n2 = 
            seq {
                &lt;span style="color: blue"&gt;let &lt;/span&gt;n0 = n1 + n2 
                &lt;span style="color: blue"&gt;yield &lt;/span&gt;n0
                &lt;span style="color: blue"&gt;yield! &lt;/span&gt;fibseq n0 n1 }
        seq {&lt;span style="color: blue"&gt;yield &lt;/span&gt;1I ; &lt;span style="color: blue"&gt;yield &lt;/span&gt;1I ; &lt;span style="color: blue"&gt;yield! &lt;/span&gt;(fibseq 1I 1I)}
                
    (fibseq |&amp;gt; Seq.findIndex (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(i |&amp;gt; string).Length = 1000)) + 1&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/186237575886241271/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-25.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/186237575886241271'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/186237575886241271'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-25.html' title='Problem 25: What is the first term in the Fibonacci sequence to contain 1000 digits?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3607232451469924204</id><published>2010-05-21T01:06:00.001-04:00</published><updated>2010-05-22T12:38:51.112-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 24: What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</title><content type='html'>&lt;p&gt;Completing this one marks my advance to “level 1”, having completed 25 problems (I completed Problem 67 when I completed Problem 18), and placing me in the “above what 80.11% of members have failed to do” category.&lt;/p&gt;  &lt;p&gt;The algorithm itself was learned from &lt;a title="http://stackoverflow.com/questions/352203/generating-permutations-lazily" href="http://stackoverflow.com/questions/352203/generating-permutations-lazily"&gt;http://stackoverflow.com/questions/352203/generating-permutations-lazily&lt;/a&gt;, which produces permutations lexicographically in sequence.&amp;#160; Of course, the example given there is in C++, so my F# solution is much different.&amp;#160; My first attempt was horrid.&amp;#160; After several iterations I finally got it to perform well (about 90 milliseconds, from about 6 seconds) and to at least look kind of functional.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem24g =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;advance (perm:int[]) =
        &lt;span style="color: green"&gt;//Find the longest &amp;quot;tail&amp;quot; that is ordered in decreasing order ((s+1)..perm.Length-1).
        &lt;/span&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;perm.[i] &amp;gt;= perm.[i-1] &lt;span style="color: blue"&gt;then &lt;/span&gt;i-1
            &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i-1)
        &lt;span style="color: blue"&gt;let &lt;/span&gt;s = find (perm.Length-1)
        &lt;span style="color: blue"&gt;let &lt;/span&gt;s' = perm.[s]
        
        &lt;span style="color: green"&gt;//Change the number just before the tail (s') to the smallest number bigger than it in the tail (perm.[t]).
        &lt;/span&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i imin =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;i = perm.Length &lt;span style="color: blue"&gt;then &lt;/span&gt;imin
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;perm.[i] &amp;gt; s' &amp;amp;&amp;amp; perm.[i] &amp;lt; perm.[imin] &lt;span style="color: blue"&gt;then &lt;/span&gt;find (i+1) i
            &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1) imin
        &lt;span style="color: blue"&gt;let &lt;/span&gt;t = find (s+1) (s+1)
        
        perm.[s] &amp;lt;- perm.[t]
        perm.[t] &amp;lt;- s'
        
        &lt;span style="color: green"&gt;//Sort the tail in increasing order.
        &lt;/span&gt;System.Array.Sort(perm, s+1, perm.Length - s - 1)
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;perm = [|0;1;2;3;4;5;6;7;8;9|]
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i =
        &lt;span style="color: blue"&gt;if &lt;/span&gt;i = 1000000 &lt;span style="color: blue"&gt;then &lt;/span&gt;perm
        &lt;span style="color: blue"&gt;else &lt;/span&gt;advance perm ; find (i+1) 
    find  1&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3607232451469924204/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-24-what-is-millionth.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3607232451469924204'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3607232451469924204'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-24-what-is-millionth.html' title='Problem 24: What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-844682861927512555</id><published>2010-05-20T01:07:00.001-04:00</published><updated>2010-05-20T01:07:27.199-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 23: Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</title><content type='html'>&lt;p&gt;Since we’ll be reusing the sigma-divisor function again, we’ll generalize it and move it to Calc.Generalize.&amp;#160; Along with that I have added a performance tuned &lt;em&gt;cfactorize&lt;/em&gt;, which returns the canonical factorization of a number (e.g. &lt;em&gt;cfactorizeI&lt;/em&gt; 24I = [(2I, 3); (3I, 1)], noting that the second component representing the exponent is always int32, while the first is generic).&amp;#160; Note that the apparent silliness of breaking out the numerator and denomenator in &lt;em&gt;sigma &lt;/em&gt;is in order to force a “sane” generic type signature.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;cfactorize n (lp:Lp.lp&amp;lt;'a&amp;gt;) =
    &lt;span style="color: blue"&gt;if &lt;/span&gt;n = lp.one &lt;span style="color: blue"&gt;then &lt;/span&gt;[]
    &lt;span style="color: blue"&gt;else
        let &lt;/span&gt;flist = factorize n lp
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;build (f::flist) count cflist =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;flist = [] &lt;span style="color: blue"&gt;then
                &lt;/span&gt;(f,count+1)::cflist
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;f = flist.Head &lt;span style="color: blue"&gt;then
                &lt;/span&gt;build flist (count + 1) cflist
            &lt;span style="color: blue"&gt;else 
                &lt;/span&gt;build flist 0 ((f,count+1)::cflist)
        build flist 0 []&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;sigma n (lp:Lp.lp&amp;lt;'a&amp;gt;) =
    cfactorize n lp
    |&amp;gt; Seq.map 
        (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(p,e) &lt;span style="color: blue"&gt;-&amp;gt; 
            let &lt;/span&gt;numer:'a = (pown p (e+1) - lp.one)
            &lt;span style="color: blue"&gt;let &lt;/span&gt;denom:'a = (p-lp.one)
            numer / denom)
    |&amp;gt; Seq.fold (*) lp.one&lt;/pre&gt;

&lt;p&gt;Now for our solutions.&amp;#160; This problem definitely calls for arrays and mutation, but it mixes gracefully with other functional techniques.&amp;#160; My first solution (b) suffered from poor performance due to the linear time &lt;em&gt;Remove&lt;/em&gt; operations.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem23a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isAbundant n = (psigma n) &amp;gt; n
    &lt;span style="color: blue"&gt;let &lt;/span&gt;abundants = {1..28122} |&amp;gt; Seq.filter isAbundant |&amp;gt; Seq.toArray
    &lt;span style="color: blue"&gt;let &lt;/span&gt;cannots = System.Collections.Generic.List({1..28122})    
    &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..(abundants.Length-1) &lt;span style="color: blue"&gt;do
        for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;i..(abundants.Length-1) &lt;span style="color: blue"&gt;do
            &lt;/span&gt;ignore (cannots.Remove(abundants.[i] + abundants.[j]))
    cannots |&amp;gt; Seq.sum&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;I then attempted optimize by breaking out of inner iteration when the abundant sums began to exceed 28122.&amp;#160; But that didn’t make much a dent.&amp;#160; However, by removing the linear time &lt;em&gt;Remove&lt;/em&gt; operations and instead zeroing out&amp;#160; elements by array index, speed was improved by 100-fold (from about a a minute to about two seconds).&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem23b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isAbundant n = (psigma n) &amp;gt; n
    &lt;span style="color: blue"&gt;let &lt;/span&gt;abundants = {1..28122} |&amp;gt; Seq.filter isAbundant |&amp;gt; Seq.toArray
    &lt;span style="color: blue"&gt;let &lt;/span&gt;cannots = {1..28122} |&amp;gt; Seq.toArray
    &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..(abundants.Length-1) &lt;span style="color: blue"&gt;do
        let rec &lt;/span&gt;removeAbundants j =
            &lt;span style="color: blue"&gt;let &lt;/span&gt;can = abundants.[i] + abundants.[j]
            &lt;span style="color: blue"&gt;if &lt;/span&gt;can &amp;gt; 28122 &lt;span style="color: blue"&gt;then &lt;/span&gt;()
            &lt;span style="color: blue"&gt;else
                &lt;/span&gt;cannots.[can-1] &amp;lt;- 0 
                removeAbundants (j+1)
        removeAbundants i
    cannots |&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/844682861927512555/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-23-find-sum-of-all-positive.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/844682861927512555'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/844682861927512555'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-23-find-sum-of-all-positive.html' title='Problem 23: Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1097050289557088564</id><published>2010-05-19T00:20:00.001-04:00</published><updated>2010-05-19T00:40:31.150-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 22: What is the total of all the name “scores” in the file?</title><content type='html'>&lt;p&gt;Due to the nature of this problem, we don’t shy away from mutation for performance gains.&amp;#160; For example, sorting the names array in place.&amp;#160; The most novel part of this implementation is calculating uppercase alphabetical position based on character to integer conversions.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem22b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;text = System.IO.File.ReadAllText(&lt;span style="color: maroon"&gt;&amp;quot;names.txt&amp;quot;&lt;/span&gt;)
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;names = text.Split([|&lt;span style="color: maroon"&gt;','&lt;/span&gt;;&lt;span style="color: maroon"&gt;'&amp;quot;'&lt;/span&gt;|], System.StringSplitOptions.RemoveEmptyEntries) 
    names |&amp;gt; Array.sortInPlace

    seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..names.Length-1 &lt;span style="color: blue"&gt;do 
              yield &lt;/span&gt;(i+1) * (names.[i] |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(int c) - 64)) }
    |&amp;gt; Seq.sum&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1097050289557088564/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-22-what-is-total-of-all-name.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1097050289557088564'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1097050289557088564'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-22-what-is-total-of-all-name.html' title='Problem 22: What is the total of all the name “scores” in the file?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-5117814280951804259</id><published>2010-05-18T02:04:00.001-04:00</published><updated>2010-05-18T21:58:17.628-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 21: Evaluate the sum of all the amicable numbers under 10000.</title><content type='html'>&lt;p&gt;First, using our fast &lt;em&gt;factorize &lt;/em&gt;function, we implement the well-known sigma-divisor function and it’s proper companion.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;sigma n =
    factorize n
    |&amp;gt; Seq.groupBy id
    |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(f,s) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(f, Seq.length s))
    |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(p,e) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(pown p (e+1) - 1)/(p-1))
    |&amp;gt; Seq.fold (*) 1
    
&lt;span style="color: blue"&gt;let &lt;/span&gt;psigma n = sigma n - n&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Then the solution is straight forward, solution (a) recursively builds a list of amicable pairs, while solution (b) uses a filter with a sequence expression.&amp;#160; Notice the small optimizations skipping primes.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem21a =
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;build a alist =
        &lt;span style="color: blue"&gt;match &lt;/span&gt;(a,psigma a) &lt;span style="color: blue"&gt;with
        &lt;/span&gt;| (a,b) &lt;span style="color: blue"&gt;when &lt;/span&gt;a &amp;lt;&amp;gt; 1 &amp;amp;&amp;amp; a &amp;lt;&amp;gt; b &amp;amp;&amp;amp; (psigma b) = a &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;build (a+1) (a::alist)
        | (9999,_) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;alist
        | _ &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;build (a+1) alist
    (build 4 []) |&amp;gt; List.sum
    
&lt;span style="color: blue"&gt;let &lt;/span&gt;problem21b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isAmicable a = 
        &lt;span style="color: blue"&gt;let &lt;/span&gt;b = psigma a
        a &amp;lt;&amp;gt; 1 &amp;amp;&amp;amp; a &amp;lt;&amp;gt; b &amp;amp;&amp;amp; (psigma b) = a    
    {4..9999} |&amp;gt; Seq.filter isAmicable |&amp;gt; Seq.sum&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/5117814280951804259/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-21.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5117814280951804259'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5117814280951804259'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-21.html' title='Problem 21: Evaluate the sum of all the amicable numbers under 10000.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-6568286076432739667</id><published>2010-05-15T22:58:00.001-04:00</published><updated>2010-07-03T15:30:04.024-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>LanguagePrimitives and Generic Math</title><content type='html'>&lt;p&gt;Over the past few days I’ve been exploring ways to organize and reuse common functions which repeat across Euler problems.&amp;nbsp; Something I’ve been focusing on is leveraging F#’s structural typing feature to generalized implementations as much as possible (e.g. implement &lt;em&gt;isPrime &lt;/em&gt;once&lt;em&gt; &lt;/em&gt;so that it can be reused for int, long and bigint).&amp;nbsp; The following design has flowed out of this discussion: &lt;a title="http://stackoverflow.com/questions/2840714/f-static-member-type-constraints" href="http://stackoverflow.com/questions/2840714/f-static-member-type-constraints"&gt;http://stackoverflow.com/questions/2840714/f-static-member-type-constraints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The following is an extension of the LanguagePrimitives module which includes a set of functions, types, and values that help us leverage F#’s ability to statically inferred structural type constraints.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;namespace &lt;/span&gt;Microsoft.FSharp.Core

&lt;span style="color: blue"&gt;module &lt;/span&gt;LanguagePrimitives =

    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;zero_of (target:'a) : 'a = LanguagePrimitives.GenericZero&amp;lt;'a&amp;gt;
    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;one_of (target:'a) : 'a = LanguagePrimitives.GenericOne&amp;lt;'a&amp;gt;
    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;two_of (target:'a) : 'a = one_of(target) + one_of(target)
    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;three_of (target:'a) : 'a = two_of(target) + one_of(target)
    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;negone_of (target:'a) : 'a = zero_of(target) - one_of(target)
    
    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;any_of (target:'a) (x:int) : 'a = 
        &lt;span style="color: blue"&gt;let &lt;/span&gt;one:'a = one_of target
        &lt;span style="color: blue"&gt;let &lt;/span&gt;zero:'a = zero_of target
        &lt;span style="color: blue"&gt;let &lt;/span&gt;xu = &lt;span style="color: blue"&gt;if &lt;/span&gt;x &amp;gt; 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;1 &lt;span style="color: blue"&gt;else &lt;/span&gt;-1
        &lt;span style="color: blue"&gt;let &lt;/span&gt;gu:'a = &lt;span style="color: blue"&gt;if &lt;/span&gt;x &amp;gt; 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;one &lt;span style="color: blue"&gt;else &lt;/span&gt;zero-one

        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;get i g = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;i = x &lt;span style="color: blue"&gt;then &lt;/span&gt;g
            &lt;span style="color: blue"&gt;else &lt;/span&gt;get (i+xu) (g+gu)
        get 0 zero 
        
    &lt;span style="color: blue"&gt;type &lt;/span&gt;G&amp;lt;'a&amp;gt; = {
        negone:'a
        zero:'a
        one:'a
        two:'a
        three:'a
        any: int &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;'a
    }    

    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;G_of (target:'a) : (G&amp;lt;'a&amp;gt;) = {
        zero = zero_of target
        one = one_of target
        two = two_of target
        three = three_of target
        negone = negone_of target
        any = any_of target
    }

    &lt;span style="color: blue"&gt;let &lt;/span&gt;gn = G_of 1   &lt;span style="color: green"&gt;//int32
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;gL = G_of 1L  &lt;span style="color: green"&gt;//int64
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;gI = G_of 1I  &lt;span style="color: green"&gt;//bigint
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;gF = G_of 1.0 &lt;span style="color: green"&gt;//float 
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;gM = G_of 1.0M&lt;span style="color: green"&gt;//decimal&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;And a new module Numerics, together with nested module Generic with the help of our LanguagePrimitives extensions, allows us to implement generic numeric algorithms, and then expose specific (more efficient) partial applications of them.&lt;/p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;module &lt;/span&gt;Numerics =
    &lt;span style="color: blue"&gt;open &lt;/span&gt;Microsoft.FSharp.Core.LanguagePrimitives

    &lt;span style="color: blue"&gt;module &lt;/span&gt;Generic =
        &lt;span style="color: green"&gt;//prime factorization, from greatest to least
        &lt;/span&gt;&lt;span style="color: blue"&gt;let inline &lt;/span&gt;factorize (g:G&amp;lt;'a&amp;gt;) n = 
            &lt;span style="color: blue"&gt;let rec &lt;/span&gt;factorize n j flist =  
                &lt;span style="color: blue"&gt;if &lt;/span&gt;n = g.one &lt;span style="color: blue"&gt;then &lt;/span&gt;flist 
                &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = g.zero &lt;span style="color: blue"&gt;then &lt;/span&gt;factorize (n/j) j (j::flist) 
                &lt;span style="color: blue"&gt;else &lt;/span&gt;factorize n (j + g.one) (flist) 
            factorize n g.two []    
        &lt;span style="color: green"&gt;//...

    &lt;/span&gt;&lt;span style="color: blue"&gt;open &lt;/span&gt;Generic

    &lt;span style="color: blue"&gt;let inline &lt;/span&gt;factorizeG n = factorize (G_of n) n
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorizeL = factorize gL
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorizeI = factorize gI
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorize = factorize gn&lt;/pre&gt;&lt;pre class="code"&gt;    &lt;span style="color: green"&gt;//... &lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;pre class="code"&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;Here is an example of the kind of types signatures we get using this strategy.&lt;/p&gt;&lt;pre class="code"&gt;val inline factorizeG :
   ^a -&amp;gt;  ^a list
    when  ^a : (static member get_Zero : -&amp;gt;  ^a) and
          ^a : (static member get_One : -&amp;gt;  ^a) and
          ^a : (static member ( + ) :  ^a *  ^a -&amp;gt;  ^a) and
          ^a : (static member ( - ) :  ^a *  ^a -&amp;gt;  ^a) and
          ^a : (static member ( / ) :  ^a *  ^a -&amp;gt;  ^a) and
          ^a : (static member ( % ) :  ^a *  ^a -&amp;gt;  ^a) and  ^a : equality&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/6568286076432739667/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/helpers-module.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6568286076432739667'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6568286076432739667'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/helpers-module.html' title='LanguagePrimitives and Generic Math'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4422279744352181186</id><published>2010-05-15T02:20:00.001-04:00</published><updated>2010-05-15T02:20:04.606-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 20: Find the sum of digits in 100!</title><content type='html'>&lt;p&gt;Reusing the &lt;em&gt;fact&lt;/em&gt; function we slipped into Problem 15, this is essentially the same as Problem 16.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem20a =
    fact 100I |&amp;gt; string |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;c |&amp;gt; string |&amp;gt; int)&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4422279744352181186/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-20-find-sum-of-digits-in-100.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4422279744352181186'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4422279744352181186'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-20-find-sum-of-digits-in-100.html' title='Problem 20: Find the sum of digits in 100!'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2638343631881382621</id><published>2010-05-15T02:09:00.001-04:00</published><updated>2010-05-15T22:12:50.776-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 19: How many Sundays fell on the first of the month during the twentieth century?</title><content type='html'>&lt;p&gt;Relieved .NET DateTime was sufficient for this.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem19a = 
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;cur = &lt;span style="color: blue"&gt;new &lt;/span&gt;System.DateTime(1901, 1, 1);
    &lt;span style="color: blue"&gt;let &lt;/span&gt;last = &lt;span style="color: blue"&gt;new &lt;/span&gt;System.DateTime(2000, 12, 31);
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;count = 0
    &lt;span style="color: blue"&gt;while&lt;/span&gt;(cur &amp;lt;= last) &lt;span style="color: blue"&gt;do
        if &lt;/span&gt;cur.Day = 1 &amp;amp;&amp;amp; cur.DayOfWeek = System.DayOfWeek.Sunday &lt;span style="color: blue"&gt;then
            &lt;/span&gt;count &amp;lt;- count + 1
            
        cur &amp;lt;- cur.AddDays(1.0)
            
    count&lt;/pre&gt;

&lt;p&gt;And here’s a functional version.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem19b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;last = System.DateTime(2000, 12, 31)
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;sundays cur count = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;cur &amp;gt; last &lt;span style="color: blue"&gt;then &lt;/span&gt;count
        &lt;span style="color: blue"&gt;elif &lt;/span&gt;cur.Day = 1 &amp;amp;&amp;amp; cur.DayOfWeek = System.DayOfWeek.Sunday &lt;span style="color: blue"&gt;then &lt;/span&gt;sundays (cur.AddDays(1.0)) (count+1)
        &lt;span style="color: blue"&gt;else &lt;/span&gt;sundays (cur.AddDays(1.0)) count
    sundays (System.DateTime(1901, 1, 1)) 0&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2638343631881382621/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-19-how-many-sundays-fell-on.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2638343631881382621'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2638343631881382621'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-19-how-many-sundays-fell-on.html' title='Problem 19: How many Sundays fell on the first of the month during the twentieth century?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4213984744741897917</id><published>2010-05-15T01:41:00.001-04:00</published><updated>2010-05-16T18:38:36.700-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 18: Find the maximum total from top to bottom of the triangle below.</title><content type='html'>&lt;p&gt;Wow.&amp;#160; The algorithm just took a little bit of pacing to realize, but I’ve gone through several refinements and variations of the implementation.&lt;/p&gt;  &lt;p&gt;First our triangle as a string for parsing.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;tstr = &lt;span style="color: maroon"&gt;&amp;quot;75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23&amp;quot;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Our first solution is imperative.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem18c = 
    &lt;span style="color: green"&gt;//parse
    &lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;tarr = Array2D.create 15 16 0 &lt;span style="color: green"&gt;//make first column filled with zeros so no out of bounds checks required
    &lt;/span&gt;tstr.Split(&lt;span style="color: maroon"&gt;'\n'&lt;/span&gt;) |&amp;gt; Array.iteri (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i row &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;row.Split(&lt;span style="color: maroon"&gt;' '&lt;/span&gt;) |&amp;gt; Array.iteri (&lt;span style="color: blue"&gt;fun &lt;/span&gt;j cell &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(tarr.[i,j+1] &amp;lt;- (cell |&amp;gt; int))))

    &lt;span style="color: green"&gt;//calc
    &lt;/span&gt;&lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;1..14 &lt;span style="color: blue"&gt;do &lt;/span&gt;&lt;span style="color: green"&gt;//start with second row
        &lt;/span&gt;&lt;span style="color: blue"&gt;for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;1..i+1 &lt;span style="color: blue"&gt;do &lt;/span&gt;&lt;span style="color: green"&gt;//shift orientation to right
            &lt;/span&gt;tarr.[i,j] &amp;lt;- (max tarr.[i-1,j-1] tarr.[i-1,j]) + tarr.[i,j]

    &lt;span style="color: green"&gt;//find largest        
    &lt;/span&gt;&lt;span style="color: blue"&gt;let mutable &lt;/span&gt;largest = 0        
    &lt;span style="color: blue"&gt;for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;0..14 &lt;span style="color: blue"&gt;do 
        &lt;/span&gt;largest &amp;lt;- max largest tarr.[14,j] 
           
    largest&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Our second solution uses a nicer recursive functional algorithm for computing the answer, but uses (nearly) the same parsing algorithm and array.&amp;#160; It would be nicer to work with a tree structure, but string.Split is just too easy.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem18d = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;tarr = Array2D.create 15 15 0
    tstr.Split(&lt;span style="color: maroon"&gt;'\n'&lt;/span&gt;) |&amp;gt; Array.iteri (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i row &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;row.Split(&lt;span style="color: maroon"&gt;' '&lt;/span&gt;) |&amp;gt; Array.iteri (&lt;span style="color: blue"&gt;fun &lt;/span&gt;j cell &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(tarr.[i,j] &amp;lt;- (cell |&amp;gt; int))))
    
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find (row,col) = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;row = 14 &lt;span style="color: blue"&gt;then &lt;/span&gt;tarr.[row,col]
        &lt;span style="color: blue"&gt;else &lt;/span&gt;(max (find (row+1,col)) (find (row+1,col+1))) + tarr.[row,col]
    find (0,0)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4213984744741897917/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-18-find-maximum-total-from-top.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4213984744741897917'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4213984744741897917'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-18-find-maximum-total-from-top.html' title='Problem 18: Find the maximum total from top to bottom of the triangle below.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2735439089581159853</id><published>2010-05-14T22:08:00.001-04:00</published><updated>2010-05-14T22:08:20.781-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 17: If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</title><content type='html'>&lt;p&gt;After simplifying, and taking care to spell “forty” correctly.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem17d =
    &lt;span style="color: maroon"&gt;&amp;quot;OneThousand&amp;quot;&lt;/span&gt;.Length +
    
    &lt;span style="color: maroon"&gt;&amp;quot;OneHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;TwoHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;ThreeHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;FourHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;FiveHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;SixHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;SevenHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;EightHundred&amp;quot;&lt;/span&gt;.Length +
    &lt;span style="color: maroon"&gt;&amp;quot;NineHundred&amp;quot;&lt;/span&gt;.Length +
    
    99*(&lt;span style="color: maroon"&gt;&amp;quot;OneHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;TwoHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;ThreeHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;FourHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;FiveHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;SixHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;SevenHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;EightHundredAnd&amp;quot;&lt;/span&gt;.Length +
        &lt;span style="color: maroon"&gt;&amp;quot;NineHundredAnd&amp;quot;&lt;/span&gt;.Length) +
    
    10*(&lt;span style="color: maroon"&gt;&amp;quot;OneTwoThreeFourFiveSixSevenEightNineTenElevenTwelveThirteenFourteenFifteenSixteenSeventeenEighteenNineteen&amp;quot;&lt;/span&gt;.Length +
        10*(&lt;span style="color: maroon"&gt;&amp;quot;Twenty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Thirty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Forty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Fifty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Sixty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Seventy&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Eighty&amp;quot;&lt;/span&gt;.Length + &lt;span style="color: maroon"&gt;&amp;quot;Ninety&amp;quot;&lt;/span&gt;.Length) +
        8*(&lt;span style="color: maroon"&gt;&amp;quot;OneTwoThreeFourFiveSixSevenEightNine&amp;quot;&lt;/span&gt;.Length))&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2735439089581159853/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-17-if-all-numbers-from-1-to.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2735439089581159853'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2735439089581159853'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-17-if-all-numbers-from-1-to.html' title='Problem 17: If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-7884438934193009662</id><published>2010-05-13T23:56:00.001-04:00</published><updated>2010-05-13T23:56:46.364-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 16: What is the sum of the digits of the number 2**1000?</title><content type='html'>&lt;p&gt;Easy.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem16a =
    bigint.Pow(2I, 1000) |&amp;gt; string |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;c &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;c |&amp;gt; string |&amp;gt; int)&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/7884438934193009662/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-16-what-is-sum-of-digits-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/7884438934193009662'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/7884438934193009662'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-16-what-is-sum-of-digits-of.html' title='Problem 16: What is the sum of the digits of the number 2**1000?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1233003612110221845</id><published>2010-05-13T23:43:00.001-04:00</published><updated>2010-05-13T23:47:16.223-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 15: Starting in the top left corner, how many routes (without backtracking) are there through a 20 by 20 grid to the bottom right corner?</title><content type='html'>&lt;p&gt;OK.&amp;#160; I am incredibly pleased with myself for solving this one almost entirely through mathematical proof.&amp;#160; Indeed, I’ve solved it generally for &lt;em&gt;NxN&lt;/em&gt; grids.&amp;#160; The only time I relied on any outside resources (&lt;a title="http://answers.yahoo.com/question/index?qid=20100403083143AAACNJs" href="http://answers.yahoo.com/question/index?qid=20100403083143AAACNJs"&gt;http://answers.yahoo.com/question/index?qid=20100403083143AAACNJs&lt;/a&gt;) was to find a formula for calculating the number of multiset permutations (knowing at that point that it was exactly what I needed).&amp;#160; So, here goes…&lt;/p&gt;  &lt;p&gt;Two things are clear from the statement of our problem.&amp;#160; First, every route has length &lt;em&gt;N+N=m&lt;/em&gt;.&amp;#160; Second, it takes equally as many downward as rightward movements along the route to make it to the bottom right corner. Hence, we must find the number of permutations of elements in the multiset of length &lt;em&gt;m&lt;/em&gt; containing &lt;em&gt; m/2 &lt;/em&gt;downward movements and &lt;em&gt;m/2&lt;/em&gt; rightward movements.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem15a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;fact m = {1I..m} |&amp;gt; Seq.fold (*) (1I)
    &lt;span style="color: blue"&gt;let &lt;/span&gt;multiset m = (fact m) / ((fact (m/2I))*(fact (m/2I)))
    multiset 40I&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1233003612110221845/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-15-how-many-routes-are-there.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1233003612110221845'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1233003612110221845'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-15-how-many-routes-are-there.html' title='Problem 15: Starting in the top left corner, how many routes (without backtracking) are there through a 20 by 20 grid to the bottom right corner?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8941114005231072297</id><published>2010-05-13T00:14:00.001-04:00</published><updated>2010-05-24T21:48:19.680-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 14: Which starting number, under one million, produces the longest “Collatz” chain?</title><content type='html'>&lt;p&gt;I coded&amp;#160; this solution in just a couple of minutes, but ran into trouble with F#’s unchecked Int32 operations.&amp;#160; We can do checked operations using Checked.(+) for + for example.&amp;#160; After changing to Int64, this runs in about 4 and a half seconds.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem14a = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;collatz n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;collatz n count =
            &lt;span style="color: blue"&gt;let &lt;/span&gt;count = count + 1L
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1L &lt;span style="color: blue"&gt;then &lt;/span&gt;count
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % 2L = 0L &lt;span style="color: blue"&gt;then &lt;/span&gt;collatz (n/2L) count
            &lt;span style="color: blue"&gt;else &lt;/span&gt;collatz ((3L*n)+1L) count
        collatz n 0L
        
    {1L..999999L} |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(i, collatz i)) |&amp;gt; Seq.maxBy snd |&amp;gt; fst&lt;/pre&gt;

&lt;p&gt;Since subsequences are frequently shared between inputs of &lt;em&gt;n, &lt;/em&gt;this is a good opportunity to apply a memoization technique.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem14b = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;mem = &lt;span style="color: blue"&gt;new &lt;/span&gt;System.Collections.Generic.Dictionary&amp;lt;int64,int64&amp;gt;()
    &lt;span style="color: blue"&gt;let &lt;/span&gt;collatz m =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;collatz n count =
            &lt;span style="color: blue"&gt;let &lt;/span&gt;count = count + 1L
            &lt;span style="color: blue"&gt;if &lt;/span&gt;mem.ContainsKey n &lt;span style="color: blue"&gt;then
                let &lt;/span&gt;count = mem.[n] + count - 1L
                mem.Add(m, count)
                count
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n = 1L &lt;span style="color: blue"&gt;then 
                &lt;/span&gt;mem.Add(m, count)
                count
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % 2L = 0L &lt;span style="color: blue"&gt;then &lt;/span&gt;collatz (n/2L) count
            &lt;span style="color: blue"&gt;else &lt;/span&gt;collatz ((3L*n)+1L) count
        collatz m 0L
        
    {1L..999999L} |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(i, collatz i)) |&amp;gt; Seq.maxBy snd |&amp;gt; fst&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;That ran in about 1 and a half seconds.

  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8941114005231072297/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-14-which-starting-number-under.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8941114005231072297'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8941114005231072297'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-14-which-starting-number-under.html' title='Problem 14: Which starting number, under one million, produces the longest “Collatz” chain?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4425566839254610991</id><published>2010-05-12T21:48:00.001-04:00</published><updated>2010-05-12T21:48:02.493-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 13: Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</title><content type='html'>&lt;p&gt;With F#’s bigint, this is trivial.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem13a =    
    [37107287533902102798797998220837590246510135740250I;
    46376937677490009712648124896970078050417018260538I;
    74324986199524741059474233309513058123726617309629I;
    91942213363574161572522430563301811072406154908250I;
    23067588207539346171171980310421047513778063246676I;
    89261670696623633820136378418383684178734361726757I;
    28112879812849979408065481931592621691275889832738I;
    44274228917432520321923589422876796487670272189318I;
    47451445736001306439091167216856844588711603153276I;
    70386486105843025439939619828917593665686757934951I;
    62176457141856560629502157223196586755079324193331I;
    64906352462741904929101432445813822663347944758178I;
    92575867718337217661963751590579239728245598838407I;
    58203565325359399008402633568948830189458628227828I;
    80181199384826282014278194139940567587151170094390I;
    35398664372827112653829987240784473053190104293586I;
    86515506006295864861532075273371959191420517255829I;
    71693888707715466499115593487603532921714970056938I;
    54370070576826684624621495650076471787294438377604I;
    53282654108756828443191190634694037855217779295145I;
    36123272525000296071075082563815656710885258350721I;
    45876576172410976447339110607218265236877223636045I;
    17423706905851860660448207621209813287860733969412I;
    81142660418086830619328460811191061556940512689692I;
    51934325451728388641918047049293215058642563049483I;
    62467221648435076201727918039944693004732956340691I;
    15732444386908125794514089057706229429197107928209I;
    55037687525678773091862540744969844508330393682126I;
    18336384825330154686196124348767681297534375946515I;
    80386287592878490201521685554828717201219257766954I;
    78182833757993103614740356856449095527097864797581I;
    16726320100436897842553539920931837441497806860984I;
    48403098129077791799088218795327364475675590848030I;
    87086987551392711854517078544161852424320693150332I;
    59959406895756536782107074926966537676326235447210I;
    69793950679652694742597709739166693763042633987085I;
    41052684708299085211399427365734116182760315001271I;
    65378607361501080857009149939512557028198746004375I;
    35829035317434717326932123578154982629742552737307I;
    94953759765105305946966067683156574377167401875275I;
    88902802571733229619176668713819931811048770190271I;
    25267680276078003013678680992525463401061632866526I;
    36270218540497705585629946580636237993140746255962I;
    24074486908231174977792365466257246923322810917141I;
    91430288197103288597806669760892938638285025333403I;
    34413065578016127815921815005561868836468420090470I;
    23053081172816430487623791969842487255036638784583I;
    11487696932154902810424020138335124462181441773470I;
    63783299490636259666498587618221225225512486764533I;
    67720186971698544312419572409913959008952310058822I;
    95548255300263520781532296796249481641953868218774I;
    76085327132285723110424803456124867697064507995236I;
    37774242535411291684276865538926205024910326572967I;
    23701913275725675285653248258265463092207058596522I;
    29798860272258331913126375147341994889534765745501I;
    18495701454879288984856827726077713721403798879715I;
    38298203783031473527721580348144513491373226651381I;
    34829543829199918180278916522431027392251122869539I;
    40957953066405232632538044100059654939159879593635I;
    29746152185502371307642255121183693803580388584903I;
    41698116222072977186158236678424689157993532961922I;
    62467957194401269043877107275048102390895523597457I;
    23189706772547915061505504953922979530901129967519I;
    86188088225875314529584099251203829009407770775672I;
    11306739708304724483816533873502340845647058077308I;
    82959174767140363198008187129011875491310547126581I;
    97623331044818386269515456334926366572897563400500I;
    42846280183517070527831839425882145521227251250327I;
    55121603546981200581762165212827652751691296897789I;
    32238195734329339946437501907836945765883352399886I;
    75506164965184775180738168837861091527357929701337I;
    62177842752192623401942399639168044983993173312731I;
    32924185707147349566916674687634660915035914677504I;
    99518671430235219628894890102423325116913619626622I;
    73267460800591547471830798392868535206946944540724I;
    76841822524674417161514036427982273348055556214818I;
    97142617910342598647204516893989422179826088076852I;
    87783646182799346313767754307809363333018982642090I;
    10848802521674670883215120185883543223812876952786I;
    71329612474782464538636993009049310363619763878039I;
    62184073572399794223406235393808339651327408011116I;
    66627891981488087797941876876144230030984490851411I;
    60661826293682836764744779239180335110989069790714I;
    85786944089552990653640447425576083659976645795096I;
    66024396409905389607120198219976047599490197230297I;
    64913982680032973156037120041377903785566085089252I;
    16730939319872750275468906903707539413042652315011I;
    94809377245048795150954100921645863754710598436791I;
    78639167021187492431995700641917969777599028300699I;
    15368713711936614952811305876380278410754449733078I;
    40789923115535562561142322423255033685442488917353I;
    44889911501440648020369068063960672322193204149535I;
    41503128880339536053299340368006977710650566631954I;
    81234880673210146739058568557934581403627822703280I;
    82616570773948327592232845941706525094512325230608I;
    22918802058777319719839450180888072429661980811197I;
    77158542502016545090413245809786882778948721859617I;
    72107838435069186155435662884062257473692284509516I;
    20849603980134001723930671666823555245252804609722I;
    53503534226472524250874054075591789781264330331690I;]
    |&amp;gt; Seq.sum |&amp;gt; string |&amp;gt; Seq.take 10&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4425566839254610991/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-13-work-out-first-ten-digits-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4425566839254610991'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4425566839254610991'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-13-work-out-first-ten-digits-of.html' title='Problem 13: Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-204809064026172156</id><published>2010-05-12T02:00:00.001-04:00</published><updated>2010-05-12T21:06:04.070-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 12: What is the value of the first triangle number to have over five hundred divisors?</title><content type='html'>&lt;p&gt;This has been the most sophisticated problem yet.&lt;/p&gt;  &lt;p&gt;My first solution took 2 minutes to write, but I gave up on it after 5 minutes of running.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem12a = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;divisors n = seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;1..n/2 &lt;span style="color: blue"&gt;do if &lt;/span&gt;n % i = 0 &lt;span style="color: blue"&gt;then yield &lt;/span&gt;i}
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i last = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;last |&amp;gt; divisors |&amp;gt; Seq.length &amp;gt; 500 &lt;span style="color: blue"&gt;then &lt;/span&gt;last
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1) (last+(i+1))
    find 1 1&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Then I realized I had a fast function for building a list of prime factors from Problem 3 which I could use to generate a list of all divisors.&amp;#160; I abused that into giving me the answer in about 1 minute.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem12b =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;divisors n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;divisors n j list = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1I &lt;span style="color: blue"&gt;then &lt;/span&gt;list
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = 0I &lt;span style="color: blue"&gt;then &lt;/span&gt;divisors (n/j) 2I (list @ j::(list |&amp;gt; List.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;x &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;x*j)))
            &lt;span style="color: blue"&gt;else &lt;/span&gt;divisors n (j + 1I) (list)
        1I::(divisors n 2I []) |&amp;gt; List.toSeq |&amp;gt; Seq.distinct
        
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i last = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;last |&amp;gt; divisors |&amp;gt; Seq.length &amp;gt; 500 &lt;span style="color: blue"&gt;then &lt;/span&gt;last
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1I) (last+(i+1I))
    find 1I 1I&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;But then I remembered my Number Theory days.&amp;#160; Given a prime factorization p1**n1…p2**n2…p3**n3… the number of divisors is equal to (n1 + 1)*(n2 + 1)*(n3 + 1)*…&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem12c =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorize n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;factorize n j list = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1 &lt;span style="color: blue"&gt;then &lt;/span&gt;list
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;factorize (n/j) 2 (j::list)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;factorize n (j + 1) (list)
        factorize n 2 []
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;countDivisors n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;countDivisors flist count =
            &lt;span style="color: blue"&gt;match &lt;/span&gt;flist &lt;span style="color: blue"&gt;with 
            &lt;/span&gt;| [] &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;count
            | f::list &lt;span style="color: blue"&gt;-&amp;gt; 
                let &lt;/span&gt;plist = list |&amp;gt; List.partition (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i = f)
                countDivisors (snd plist) (((fst plist |&amp;gt; List.length)+2)*count)
        countDivisors (factorize n) 1

    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i last = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;last |&amp;gt; countDivisors &amp;gt; 500 &lt;span style="color: blue"&gt;then &lt;/span&gt;last
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1) (last+(i+1))
    find 1 1&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;That gave me the answer in less than a second.&lt;/p&gt;

&lt;p&gt;Here’s another version of (c) using Seq.groupBy instead of recursively apply List.partition.&amp;#160; It runs in about the same amount of time.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem12d =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorize n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;factorize n j list = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1 &lt;span style="color: blue"&gt;then &lt;/span&gt;list
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;factorize (n/j) 2 (j::list)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;factorize n (j + 1) (list)
        factorize n 2 []
    
    &lt;span style="color: blue"&gt;let &lt;/span&gt;countDivisors n =
        factorize n
        |&amp;gt; Seq.groupBy id
        |&amp;gt; Seq.fold (&lt;span style="color: blue"&gt;fun &lt;/span&gt;acc (f,s) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;((Seq.length s) + 1)*acc) 1

    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i last = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;last |&amp;gt; countDivisors &amp;gt; 500 &lt;span style="color: blue"&gt;then &lt;/span&gt;last
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i+1) (last+(i+1))
    find 1 1&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/204809064026172156/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-12-what-is-value-of-first.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/204809064026172156'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/204809064026172156'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-12-what-is-value-of-first.html' title='Problem 12: What is the value of the first triangle number to have over five hundred divisors?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4282506003148331984</id><published>2010-05-10T23:55:00.001-04:00</published><updated>2010-05-11T21:15:11.687-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 11: What is the greatest product of four numbers on the same straight line in the 20 by 20 grid?</title><content type='html'>&lt;p&gt;Not too hard, but it offered some frustration.&amp;#160; First, I couldn’t get the compiler to parse my multi-line list of lists for the grid.&amp;#160; Second, I initially didn’t consider diagonal lines going from top right to bottom left.&amp;#160; But because the question is posed more generally as “four adjacent numbers” conflicting with the title of the problem which states “four numbers on the same straight line,” I was led astray trying to solve the much more difficult adjacent problem.&lt;/p&gt;  &lt;p&gt;Our solution exhaustively &lt;em&gt;calc&lt;/em&gt;ulates all possible products, taking care not to go out of bounds of the grid.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem11a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;grid = array2D [[08;02;22;97;38;15;00;40;00;75;04;05;07;78;52;12;50;77;91;08];[49;49;99;40;17;81;18;57;60;87;17;40;98;43;69;48;04;56;62;00];[81;49;31;73;55;79;14;29;93;71;40;67;53;88;30;03;49;13;36;65];[52;70;95;23;04;60;11;42;69;24;68;56;01;32;56;71;37;02;36;91];[22;31;16;71;51;67;63;89;41;92;36;54;22;40;40;28;66;33;13;80];[24;47;32;60;99;03;45;02;44;75;33;53;78;36;84;20;35;17;12;50];[32;98;81;28;64;23;67;10;26;38;40;67;59;54;70;66;18;38;64;70];[67;26;20;68;02;62;12;20;95;63;94;39;63;08;40;91;66;49;94;21];[24;55;58;05;66;73;99;26;97;17;78;78;96;83;14;88;34;89;63;72];[21;36;23;09;75;00;76;44;20;45;35;14;00;61;33;97;34;31;33;95];[78;17;53;28;22;75;31;67;15;94;03;80;04;62;16;14;09;53;56;92];[16;39;05;42;96;35;31;47;55;58;88;24;00;17;54;24;36;29;85;57];[86;56;00;48;35;71;89;07;05;44;44;37;44;60;21;58;51;54;17;58];[19;80;81;68;05;94;47;69;28;73;92;13;86;52;17;77;04;89;55;40];[04;52;08;83;97;35;99;16;07;97;57;32;16;26;26;79;33;27;98;66];[88;36;68;87;57;62;20;72;03;46;33;67;46;55;12;32;63;93;53;69];[04;42;16;73;38;25;39;11;24;94;72;18;08;46;29;32;40;62;76;36];[20;69;36;41;72;30;23;88;34;62;99;69;82;67;59;85;74;04;36;16];[20;73;35;29;78;31;90;01;74;31;49;71;48;86;81;16;23;57;05;54];[01;70;54;71;83;51;54;69;16;92;33;48;61;43;52;01;89;19;67;48]]

    &lt;span style="color: blue"&gt;let &lt;/span&gt;calc (i,j) (iu,ju) =
        {0..3} |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;k &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;grid.[i+(k*iu),j+(k*ju)]) |&amp;gt; Seq.fold (*) 1

    seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..16 &lt;span style="color: blue"&gt;do 
             for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;0..16 &lt;span style="color: blue"&gt;do
                 yield &lt;/span&gt;calc (i,j) (1,0)
                 &lt;span style="color: blue"&gt;yield &lt;/span&gt;calc (i,j) (0,1)
                 &lt;span style="color: blue"&gt;yield &lt;/span&gt;calc (i,j) (1,1)
                 &lt;span style="color: blue"&gt;if &lt;/span&gt;i-3 &amp;gt;= 0 &lt;span style="color: blue"&gt;then yield &lt;/span&gt;calc (i,j) (-1,1) }
    |&amp;gt; Seq.max&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4282506003148331984/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-11-what-is-greatest-product-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4282506003148331984'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4282506003148331984'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-11-what-is-greatest-product-of.html' title='Problem 11: What is the greatest product of four numbers on the same straight line in the 20 by 20 grid?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-8806143991260367094</id><published>2010-05-10T21:35:00.001-04:00</published><updated>2010-05-27T00:24:53.122-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 10: Find the sum of all the primes below two million.</title><content type='html'>&lt;p&gt;This problem is a variation on Problem 7 allowing us to reuse &lt;em&gt;isPrime &lt;/em&gt;and modify &lt;em&gt;nthPrime &lt;/em&gt;to build a list of primes up to a max.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: green"&gt;//problem 10
&lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem10a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;primes max = 
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;primes i plist =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;i &amp;gt; max &lt;span style="color: blue"&gt;then &lt;/span&gt;plist
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;i |&amp;gt; isPrime &lt;span style="color: blue"&gt;then &lt;/span&gt;primes (i+2) (i::plist)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;primes (i+2) plist
        primes 3 [2] &lt;span style="color: green"&gt;//start at 3, and with a list containing our only even prime
        
    &lt;/span&gt;primes 1999999 |&amp;gt; List.sumBy int64  &lt;span style="color: green"&gt;//convert to int64 to avoid overflow&lt;/span&gt;&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Another solution using a sequence expression is even nicer though,&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem10b =
    (seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;3..2..1999999 &lt;span style="color: blue"&gt;do if &lt;/span&gt;i |&amp;gt; isPrime &lt;span style="color: blue"&gt;then yield &lt;/span&gt;i} &lt;span style="color: green"&gt;//odd primes
    &lt;/span&gt;|&amp;gt; Seq.sumBy int64) + 2L &lt;span style="color: green"&gt;//dont forget 2&lt;/span&gt;&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/8806143991260367094/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-10-find-sum-of-all-primes-below.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8806143991260367094'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/8806143991260367094'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-10-find-sum-of-all-primes-below.html' title='Problem 10: Find the sum of all the primes below two million.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4910882425952973274</id><published>2010-05-10T12:30:00.001-04:00</published><updated>2010-05-10T21:15:52.714-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 9: There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.</title><content type='html'>&lt;p&gt;Here we generate a sequence of all possible triplets meeting the conditions, and find the first which is Pythagorean.&amp;#160; It took a while to get this to perform well, my original solution required three nested loops and took several seconds to compute.&amp;#160; By playing with the conditions &lt;em&gt;a&lt;/em&gt; &amp;lt; &lt;em&gt;b&lt;/em&gt; &amp;lt; &lt;em&gt;c&lt;/em&gt; and &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c &lt;/em&gt;= 1000, and knowing the first Pythagorean triplet is (3,4,5), I was able to apply some bounds to &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; (though the upper bound for &lt;em&gt;a&lt;/em&gt; will never trip when it’s piped into Seq.find).&amp;#160; This solution takes a fraction of a second.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem9a =
    seq {&lt;span style="color: blue"&gt;for &lt;/span&gt;a &lt;span style="color: blue"&gt;in &lt;/span&gt;3..332 &lt;span style="color: blue"&gt;do for &lt;/span&gt;b &lt;span style="color: blue"&gt;in &lt;/span&gt;4..498 &lt;span style="color: blue"&gt;do yield &lt;/span&gt;(a, b, 1000 - a - b)}
    |&amp;gt; Seq.find (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(a,b,c) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;(pown a 2) + (pown b 2) = (pown c 2))
    |&amp;gt; (&lt;span style="color: blue"&gt;fun &lt;/span&gt;(a,b,c) &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;a*b*c)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4910882425952973274/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-9-there-exists-exactly-one.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4910882425952973274'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4910882425952973274'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-9-there-exists-exactly-one.html' title='Problem 9: There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-4037644538058256010</id><published>2010-05-09T01:15:00.001-04:00</published><updated>2010-05-09T12:37:16.771-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 8: Find the greatest product of five consecutive digits in the 1000-digit number.</title><content type='html'>&lt;p&gt;First we get our 1000-digit number into a string suitable for digit traversal.&amp;nbsp; F# has multi-line strings and the backslash character may be used at the end of each line to prevent newline characters from being inserted.&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;digits1000 = &lt;span style="color: maroon"&gt;"73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;While the algorithm required for solving this problem is straight forward, it gives us a nice opportunity to compare an iterative approach (a) with a pure functional approach (b).&amp;nbsp; Note: make sure to convert each char to a string before converting to an int!&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem8a =
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;max = 0
    &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;0..(digits1000.Length-5) &lt;span style="color: blue"&gt;do
        let mutable &lt;/span&gt;next = 1
        &lt;span style="color: blue"&gt;for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;0..4 &lt;span style="color: blue"&gt;do
            &lt;/span&gt;next &amp;lt;- next * (digits1000.[i+j] |&amp;gt; string |&amp;gt; int)
        &lt;span style="color: blue"&gt;if &lt;/span&gt;next &amp;gt; max &lt;span style="color: blue"&gt;then &lt;/span&gt;max &amp;lt;- next
    max
       
&lt;span style="color: blue"&gt;let &lt;/span&gt;problem8b =
    {0..digits1000.Length-5}
    |&amp;gt; Seq.map
        (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; 
             &lt;/span&gt;{0..4} 
             |&amp;gt; Seq.map (&lt;span style="color: blue"&gt;fun &lt;/span&gt;j &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;digits1000.[i+j] |&amp;gt; string |&amp;gt; int) 
             |&amp;gt; Seq.fold (*) 1)
    |&amp;gt; Seq.max&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;pre class="code"&gt;&lt;/pre&gt;I personally prefer the descriptiveness of (b) and it’s performance is on par with (a) .&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/4037644538058256010/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-8.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4037644538058256010'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/4037644538058256010'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-8.html' title='Problem 8: Find the greatest product of five consecutive digits in the 1000-digit number.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-1016746730809130038</id><published>2010-05-08T23:26:00.001-04:00</published><updated>2010-05-10T10:15:48.361-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 7: What is the 10001st prime number?</title><content type='html'>&lt;p&gt;I think I’m getting the hang of this!&amp;#160; Some notable optimizations: isPrime only needs to check the divisibility of &lt;em&gt;n&lt;/em&gt; by numbers 2..&lt;em&gt;sqrt(n)&lt;/em&gt;, and nthPrime only needs to check odd numbers for primality by incrementing &lt;em&gt;i&lt;/em&gt; by steps of 2 starting at 1.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem7a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;isPrime n =
        &lt;span style="color: blue"&gt;let &lt;/span&gt;nsqrt = n |&amp;gt; float |&amp;gt; sqrt |&amp;gt; int
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;isPrime i =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;i &amp;gt; nsqrt &lt;span style="color: blue"&gt;then true
            elif &lt;/span&gt;n % i = 0 &lt;span style="color: blue"&gt;then false
            else &lt;/span&gt;isPrime (i+1)
        isPrime 2
        
    &lt;span style="color: blue"&gt;let &lt;/span&gt;nthPrime n = 
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;nthPrime i p count =
            &lt;span style="color: blue"&gt;if &lt;/span&gt;count = n &lt;span style="color: blue"&gt;then &lt;/span&gt;p
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;i |&amp;gt; isPrime &lt;span style="color: blue"&gt;then &lt;/span&gt;nthPrime (i+2) i (count+1)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;nthPrime (i+2) p count
        nthPrime 1 1 0
        
    nthPrime 10001&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/1016746730809130038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-7-what-is-10001st-prime-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1016746730809130038'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/1016746730809130038'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-7-what-is-10001st-prime-number.html' title='Problem 7: What is the 10001st prime number?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-6738124054458586156</id><published>2010-05-08T21:24:00.001-04:00</published><updated>2010-05-08T21:25:07.003-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 6: Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</title><content type='html'>&lt;p&gt;This one is simple.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem6a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;range = {1..100}
    &lt;span style="color: blue"&gt;let &lt;/span&gt;sumOfSquares = range |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;x &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;x * x)
    &lt;span style="color: blue"&gt;let &lt;/span&gt;sumSquared = pown (range |&amp;gt; Seq.sum) 2
    sumSquared - sumOfSquares&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/6738124054458586156/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-6-find-difference-between-sum.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6738124054458586156'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/6738124054458586156'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-6-find-difference-between-sum.html' title='Problem 6: Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-5295928510437236413</id><published>2010-05-08T14:23:00.001-04:00</published><updated>2010-05-09T11:02:38.360-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 5: What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?</title><content type='html'>&lt;p&gt;This one was pretty easy.&amp;#160; We only need to test &lt;em&gt;i&lt;/em&gt; against 11 to 20 since the numbers in that range are themselves divisible by those in 1 to 10.&amp;#160; Also, a lower bound for &lt;em&gt;i &lt;/em&gt;is the product of all primes in 1 to 20.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem5a =
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;find i = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;{11..20} |&amp;gt; Seq.forall (&lt;span style="color: blue"&gt;fun &lt;/span&gt;d &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i % d = 0) &lt;span style="color: blue"&gt;then &lt;/span&gt;i
        &lt;span style="color: blue"&gt;else &lt;/span&gt;find (i + 1)
    find (2*3*5*7*11*13*17*19)&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/5295928510437236413/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-5-what-is-smallest-number-that.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5295928510437236413'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/5295928510437236413'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-5-what-is-smallest-number-that.html' title='Problem 5: What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-3019582081090029161</id><published>2010-05-08T13:26:00.001-04:00</published><updated>2010-05-09T12:40:41.357-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 4: Find the largest palidromic number made from the product of two 3-digit numbers.</title><content type='html'>&lt;p&gt;First we implement a function for determining whether a number is palindromic.&amp;#160; We use an efficient tail recursive algorithm comparing the string converted number by character indices working from either end of the string until we reach the middle.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;isPalindrome n =
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;isPalindrome (nstr:string) i j =
        &lt;span style="color: blue"&gt;if &lt;/span&gt;i &amp;gt; j &lt;span style="color: blue"&gt;then true 
        elif  &lt;/span&gt;nstr.[i] &amp;lt;&amp;gt; nstr.[j] &lt;span style="color: blue"&gt;then false
        else &lt;/span&gt;isPalindrome nstr (i+1) (j-1)
    &lt;span style="color: blue"&gt;let &lt;/span&gt;nstr = n |&amp;gt; string
    isPalindrome nstr 0 (nstr.Length - 1)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Now we just need to enumerate all products made from two 3-digit (100 through 999) numbers, taking the max of those which are palindromic.&amp;#160; Solution (a) uses an imperative approach justifiable in nested loop scenarios while (b) and (c) use sequence expressions and typical function applications.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: green"&gt;//fastest, reasonable use of iterative loop + mutable
&lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem4a =        
    &lt;span style="color: blue"&gt;let mutable &lt;/span&gt;max = 0
    &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do
        for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do
            let &lt;/span&gt;p = i * j
            &lt;span style="color: blue"&gt;if &lt;/span&gt;p &amp;gt; max &amp;amp;&amp;amp; p |&amp;gt; isPalindrome &lt;span style="color: blue"&gt;then &lt;/span&gt;max &amp;lt;- p    
    max

&lt;span style="color: green"&gt;//notably slower since has to process isPalindrome for every possibility
&lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem4b =
    seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do yield &lt;/span&gt;i * j }
    |&amp;gt; Seq.filter isPalindrome
    |&amp;gt; Seq.max

&lt;span style="color: green"&gt;//still lower than 4a
&lt;/span&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem4c =
    seq { &lt;span style="color: blue"&gt;for &lt;/span&gt;i &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do for &lt;/span&gt;j &lt;span style="color: blue"&gt;in &lt;/span&gt;100..999 &lt;span style="color: blue"&gt;do yield &lt;/span&gt;i * j }
    |&amp;gt; Seq.fold (&lt;span style="color: blue"&gt;fun &lt;/span&gt;acc i &lt;span style="color: blue"&gt;-&amp;gt; if &lt;/span&gt;i &amp;gt; acc &amp;amp;&amp;amp; i |&amp;gt; isPalindrome &lt;span style="color: blue"&gt;then &lt;/span&gt;i &lt;span style="color: blue"&gt;else &lt;/span&gt;acc) 0&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;While (b) is the clearest, I like solution (a) the best since it’s clear enough and notably faster than either (b) or (c).&lt;/p&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/3019582081090029161/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-4-find-largest-palidromic.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3019582081090029161'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/3019582081090029161'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-4-find-largest-palidromic.html' title='Problem 4: Find the largest palidromic number made from the product of two 3-digit numbers.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-2496026077824042340</id><published>2010-05-08T13:02:00.001-04:00</published><updated>2010-05-16T19:00:22.263-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 3: What is the largest prime factor of the number 600851475143?</title><content type='html'>&lt;p&gt;This one required a flash of inspiration.&amp;#160; We recursively build a list of prime factors by finding the first even divisor &lt;em&gt;j&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt;, necessarily prime, and then repeating with &lt;em&gt;n&lt;/em&gt;/&lt;em&gt;j&lt;/em&gt; until we reach &lt;em&gt;n &lt;/em&gt;= 1.&amp;#160; It works out that the head of the list is the largest prime factor.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem3a =
    &lt;span style="color: blue"&gt;let &lt;/span&gt;factorize n =
        &lt;span style="color: blue"&gt;let rec &lt;/span&gt;factorize n j list = 
            &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1I &lt;span style="color: blue"&gt;then &lt;/span&gt;list
            &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = 0I &lt;span style="color: blue"&gt;then &lt;/span&gt;factorize (n/j) j (j::list)
            &lt;span style="color: blue"&gt;else &lt;/span&gt;factorize n (j + 1I) (list)
        factorize n 2I []
    600851475143I |&amp;gt; factorize |&amp;gt; List.head&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;Now, we only need the largest prime factor so this algorithm can be specialized.&lt;/p&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem3b =
    &lt;span style="color: blue"&gt;let rec &lt;/span&gt;largestFactor n j largest = 
        &lt;span style="color: blue"&gt;if &lt;/span&gt;n = 1I &lt;span style="color: blue"&gt;then &lt;/span&gt;largest
        &lt;span style="color: blue"&gt;elif &lt;/span&gt;n % j = 0I &lt;span style="color: blue"&gt;then &lt;/span&gt;largestFactor (n/j) j j
        &lt;span style="color: blue"&gt;else &lt;/span&gt;largestFactor n (j + 1I) largest
    largestFactor 600851475143I 2I 1I&lt;/pre&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/2496026077824042340/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-3-what-is-largest-prime-factor.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2496026077824042340'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/2496026077824042340'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-3-what-is-largest-prime-factor.html' title='Problem 3: What is the largest prime factor of the number 600851475143?'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-7330674311086215958</id><published>2010-05-08T12:52:00.001-04:00</published><updated>2010-05-08T12:52:25.481-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 2: Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed four million.</title><content type='html'>&lt;p&gt;First we implement a function for computing terms of the Fibonacci sequence.&lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let rec &lt;/span&gt;fib n = &lt;span style="color: blue"&gt;if &lt;/span&gt;(n = 1 || n = 0) &lt;span style="color: blue"&gt;then &lt;/span&gt;1 &lt;span style="color: blue"&gt;else &lt;/span&gt;fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;We pipe that into a sequence generator, taking all even terms not exceeding four million, and then sum them.&lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem2a =
    fib
    |&amp;gt; Seq.initInfinite
    |&amp;gt; Seq.takeWhile (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i &amp;lt;= 4000000) 
    |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i % 2 = 0)
    |&amp;gt; Seq.sum&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/7330674311086215958/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-2-find-sum-of-all-even-valued.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/7330674311086215958'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/7330674311086215958'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-2-find-sum-of-all-even-valued.html' title='Problem 2: Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed four million.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-979150636733323636</id><published>2010-05-08T11:54:00.000-04:00</published><updated>2010-05-10T10:17:25.095-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Problem 1: Add all the natural numbers below one thousand that are multiples of 3 or 5.</title><content type='html'>&lt;p&gt;Solutions (a)-(c) take the same approach but use different Seq function applications. Every integer from 1 to 999 is tested. &lt;/p&gt;  &lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem1a =
    {1..999}
    |&amp;gt; Seq.filter (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; &lt;/span&gt;i % 3 = 0 || i % 5 = 0)
    |&amp;gt; Seq.sum

&lt;span style="color: blue"&gt;let &lt;/span&gt;problem1b =
    {1..999}
    |&amp;gt; Seq.fold (&lt;span style="color: blue"&gt;fun &lt;/span&gt;acc i &lt;span style="color: blue"&gt;-&amp;gt; if &lt;/span&gt;i % 3 = 0 || i % 5 = 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;acc + i &lt;span style="color: blue"&gt;else &lt;/span&gt;acc) 0
    
&lt;span style="color: blue"&gt;let &lt;/span&gt;problem1c =    
    {1..999}
    |&amp;gt; Seq.sumBy (&lt;span style="color: blue"&gt;fun &lt;/span&gt;i &lt;span style="color: blue"&gt;-&amp;gt; if &lt;/span&gt;i % 3 = 0 || i % 5 = 0 &lt;span style="color: blue"&gt;then &lt;/span&gt;i &lt;span style="color: blue"&gt;else &lt;/span&gt;0)&lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;Solution (d) uses inclusion/exclusion instead of an exhaustive search. &lt;/p&gt;

&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;let &lt;/span&gt;problem1d = 
    &lt;span style="color: blue"&gt;let &lt;/span&gt;a = Seq.append {0..3..999} {0..5..999} |&amp;gt; Seq.sum
    &lt;span style="color: blue"&gt;let &lt;/span&gt;b = {0..15..999} |&amp;gt; Seq.sum
    a - b    &lt;/pre&gt;
&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;

&lt;p&gt;I like solution (a) the best since it's the clearest.&lt;/p&gt;  </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/979150636733323636/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-1-add-all-natural-numbers-below.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/979150636733323636'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/979150636733323636'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/problem-1-add-all-natural-numbers-below.html' title='Problem 1: Add all the natural numbers below one thousand that are multiples of 3 or 5.'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-8850569409241765652.post-509450143634004038</id><published>2010-05-08T10:54:00.002-04:00</published><updated>2010-05-08T21:31:42.765-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>The beginning</title><content type='html'>Back in 2008 I happened upon Expert F# while browsing my local book store.&amp;#160; Having a background in mathematics, I was enticed by the Introduction which pitched F# as a programming language close in expression to what mathematicians are accustomed.&amp;#160; I purchased the book and read it in large part while also following the language on the web.&amp;#160; In this first pass I mostly absorbed the concepts of functional programming but didn't practice much with the language itself.&amp;#160; However, in the intervening years I've been applying a lot of the functional concepts I learned to my day work in C#.&amp;#160; Now, with the release of F# version 2.0, I've found renewed interest and have determined to become experienced with the language itself.&amp;#160; The mathematical nature of the problems in &lt;a href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt; make it a particularly well-suited set of challenges for becoming familiar with F#.&amp;#160; While it's been done, here I will document my journey.     </content><link rel='replies' type='application/atom+xml' href='http://projecteulerfun.blogspot.com/feeds/509450143634004038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/begining.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/509450143634004038'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8850569409241765652/posts/default/509450143634004038'/><link rel='alternate' type='text/html' href='http://projecteulerfun.blogspot.com/2010/05/begining.html' title='The beginning'/><author><name>Stephen Swensen</name><uri>http://www.blogger.com/profile/07187964148356762566</uri><email>stephen.swensen@gmail.com</email></author><thr:total>0</thr:total></entry></feed>